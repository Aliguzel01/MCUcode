
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002228  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e8  080024e8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080024e8  080024e8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e8  080024e8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080024f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000084  08002574  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08002574  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000376c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a88  00000000  00000000  00023820  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000268  00000000  00000000  000242a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000200  00000000  00000000  00024510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003acb  00000000  00000000  00024710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002658  00000000  00000000  000281db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c54c  00000000  00000000  0002a833  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036d7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fc4  00000000  00000000  00036dfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080023c0 	.word	0x080023c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	080023c0 	.word	0x080023c0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002ae:	b580      	push	{r7, lr}
 80002b0:	b086      	sub	sp, #24
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	60f8      	str	r0, [r7, #12]
 80002b6:	60b9      	str	r1, [r7, #8]
 80002b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]
 80002be:	e00a      	b.n	80002d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002c0:	f3af 8000 	nop.w
 80002c4:	4601      	mov	r1, r0
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	1c5a      	adds	r2, r3, #1
 80002ca:	60ba      	str	r2, [r7, #8]
 80002cc:	b2ca      	uxtb	r2, r1
 80002ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	3301      	adds	r3, #1
 80002d4:	617b      	str	r3, [r7, #20]
 80002d6:	697a      	ldr	r2, [r7, #20]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	429a      	cmp	r2, r3
 80002dc:	dbf0      	blt.n	80002c0 <_read+0x12>
	}

return len;
 80002de:	687b      	ldr	r3, [r7, #4]
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	e009      	b.n	800030e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	1c5a      	adds	r2, r3, #1
 80002fe:	60ba      	str	r2, [r7, #8]
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	4618      	mov	r0, r3
 8000304:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	3301      	adds	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	429a      	cmp	r2, r3
 8000314:	dbf1      	blt.n	80002fa <_write+0x12>
	}
	return len;
 8000316:	687b      	ldr	r3, [r7, #4]
}
 8000318:	4618      	mov	r0, r3
 800031a:	3718      	adds	r7, #24
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <_close>:

int _close(int file)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	return -1;
 8000328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000348:	605a      	str	r2, [r3, #4]
	return 0;
 800034a:	2300      	movs	r3, #0
}
 800034c:	4618      	mov	r0, r3
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <_isatty>:

int _isatty(int file)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	return 1;
 8000360:	2301      	movs	r3, #1
}
 8000362:	4618      	mov	r0, r3
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800036e:	b480      	push	{r7}
 8000370:	b085      	sub	sp, #20
 8000372:	af00      	add	r7, sp, #0
 8000374:	60f8      	str	r0, [r7, #12]
 8000376:	60b9      	str	r1, [r7, #8]
 8000378:	607a      	str	r2, [r7, #4]
	return 0;
 800037a:	2300      	movs	r3, #0
}
 800037c:	4618      	mov	r0, r3
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <_sbrk+0x50>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d102      	bne.n	800039e <_sbrk+0x16>
		heap_end = &end;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <_sbrk+0x50>)
 800039a:	4a10      	ldr	r2, [pc, #64]	; (80003dc <_sbrk+0x54>)
 800039c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <_sbrk+0x50>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <_sbrk+0x50>)
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4413      	add	r3, r2
 80003ac:	466a      	mov	r2, sp
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d907      	bls.n	80003c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80003b2:	f001 f88b 	bl	80014cc <__errno>
 80003b6:	4602      	mov	r2, r0
 80003b8:	230c      	movs	r3, #12
 80003ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80003bc:	f04f 33ff 	mov.w	r3, #4294967295
 80003c0:	e006      	b.n	80003d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <_sbrk+0x50>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4413      	add	r3, r2
 80003ca:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <_sbrk+0x50>)
 80003cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80003ce:	68fb      	ldr	r3, [r7, #12]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000a0 	.word	0x200000a0
 80003dc:	200004d8 	.word	0x200004d8

080003e0 <USART2_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <USART2_Init+0x3c>)
 80003e6:	4a0e      	ldr	r2, [pc, #56]	; (8000420 <USART2_Init+0x40>)
 80003e8:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <USART2_Init+0x3c>)
 80003ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003f0:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80003f2:	4b0a      	ldr	r3, [pc, #40]	; (800041c <USART2_Init+0x3c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <USART2_Init+0x3c>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80003fe:	4b07      	ldr	r3, [pc, #28]	; (800041c <USART2_Init+0x3c>)
 8000400:	2200      	movs	r2, #0
 8000402:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <USART2_Init+0x3c>)
 8000406:	2200      	movs	r2, #0
 8000408:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800040a:	4b04      	ldr	r3, [pc, #16]	; (800041c <USART2_Init+0x3c>)
 800040c:	2200      	movs	r2, #0
 800040e:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000410:	4802      	ldr	r0, [pc, #8]	; (800041c <USART2_Init+0x3c>)
 8000412:	f000 fc87 	bl	8000d24 <USART_Init>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000b0 	.word	0x200000b0
 8000420:	40004400 	.word	0x40004400

08000424 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <USART2_GPIOInit+0x40>)
 800042c:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800042e:	2302      	movs	r3, #2
 8000430:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000432:	2300      	movs	r3, #0
 8000434:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000436:	2301      	movs	r3, #1
 8000438:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800043a:	2302      	movs	r3, #2
 800043c:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 800043e:	2307      	movs	r3, #7
 8000440:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000442:	2302      	movs	r3, #2
 8000444:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f975 	bl	8000738 <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800044e:	2303      	movs	r3, #3
 8000450:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f96f 	bl	8000738 <GPIO_Init>

}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40020000 	.word	0x40020000

08000468 <delay>:
	GPIO_Init(&GpioLed);

}

void delay(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	e002      	b.n	800047a <delay+0x12>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3301      	adds	r3, #1
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a04      	ldr	r2, [pc, #16]	; (8000490 <delay+0x28>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d9f8      	bls.n	8000474 <delay+0xc>
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	0003d08f 	.word	0x0003d08f

08000494 <main>:
int main(void)
{
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 800049e:	f7ff feff 	bl	80002a0 <initialise_monitor_handles>

	USART2_GPIOInit();
 80004a2:	f7ff ffbf 	bl	8000424 <USART2_GPIOInit>
    USART2_Init();
 80004a6:	f7ff ff9b 	bl	80003e0 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 80004aa:	2101      	movs	r1, #1
 80004ac:	2026      	movs	r0, #38	; 0x26
 80004ae:	f000 fde9 	bl	8001084 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 80004b2:	2101      	movs	r1, #1
 80004b4:	482f      	ldr	r0, [pc, #188]	; (8000574 <main+0xe0>)
 80004b6:	f000 fc19 	bl	8000cec <USART_PeripheralControl>

    printf("Application is running\n");
 80004ba:	482f      	ldr	r0, [pc, #188]	; (8000578 <main+0xe4>)
 80004bc:	f001 f8ac 	bl	8001618 <puts>

    //sonsuza kadar yap
    while(1)
    {
		//	düğmeye basılana kadar bekleyin
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 80004c0:	bf00      	nop
 80004c2:	2100      	movs	r1, #0
 80004c4:	482d      	ldr	r0, [pc, #180]	; (800057c <main+0xe8>)
 80004c6:	f000 fad9 	bl	8000a7c <GPIO_ReadFromInputPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d0f8      	beq.n	80004c2 <main+0x2e>

		//Düğmenin geri gelmesiyle ilgili sorunları önlemek için 200 ms gecikme
		delay();
 80004d0:	f7ff ffca 	bl	8000468 <delay>

		// Sonraki mesaj dizini; cnt değerinin 2'yi geçmediğinden emin olun
		cnt = cnt % 3;
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <main+0xec>)
 80004d8:	fba3 1302 	umull	r1, r3, r3, r2
 80004dc:	0859      	lsrs	r1, r3, #1
 80004de:	460b      	mov	r3, r1
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	440b      	add	r3, r1
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	607b      	str	r3, [r7, #4]

		//İlk önce alımı kesme modunda etkinleştirelim
		// bu kod alma kesintisini etkinleştirir
		while ( USART_ReceiveDataIT(&usart2_handle,(uint8_t*)rx_buf,strlen(msg[cnt])) != USART_READY );
 80004e8:	bf00      	nop
 80004ea:	4a26      	ldr	r2, [pc, #152]	; (8000584 <main+0xf0>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fe7c 	bl	80001f0 <strlen>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4922      	ldr	r1, [pc, #136]	; (8000588 <main+0xf4>)
 80004fe:	4823      	ldr	r0, [pc, #140]	; (800058c <main+0xf8>)
 8000500:	f000 fce0 	bl	8000ec4 <USART_ReceiveDataIT>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1ef      	bne.n	80004ea <main+0x56>

		// 	Engelleme modunda cnt tarafından indekslenen msg'yi gönder
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <main+0xf0>)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000512:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <main+0xf0>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff fe68 	bl	80001f0 <strlen>
 8000520:	4603      	mov	r3, r0
 8000522:	461a      	mov	r2, r3
 8000524:	4621      	mov	r1, r4
 8000526:	4819      	ldr	r0, [pc, #100]	; (800058c <main+0xf8>)
 8000528:	f000 fc7f 	bl	8000e2a <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 800052c:	4a15      	ldr	r2, [pc, #84]	; (8000584 <main+0xf0>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000534:	4619      	mov	r1, r3
 8000536:	4816      	ldr	r0, [pc, #88]	; (8000590 <main+0xfc>)
 8000538:	f000 fffa 	bl	8001530 <iprintf>


    	// Şimdi arduino'dan tüm baytlar alınana kadar bekleyelim.
    	// Tüm baytlar alındığında rxCmplt, uygulama geri aramasında ayarlanacaktır.
    	while(rxCmplt != SET);
 800053c:	bf00      	nop
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <main+0x100>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d1fb      	bne.n	800053e <main+0xaa>

    	// sadece son baytın boş olduğundan emin olun, aksi takdirde yazdırma sırasında %s başarısız olur
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <main+0xf0>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fe4e 	bl	80001f0 <strlen>
 8000554:	4603      	mov	r3, r0
 8000556:	3301      	adds	r3, #1
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <main+0xf4>)
 800055a:	2100      	movs	r1, #0
 800055c:	54d1      	strb	r1, [r2, r3]

    	// 	Arduino'dan aldığımızı yazdırın
    	printf("Received    : %s\n",rx_buf);
 800055e:	490a      	ldr	r1, [pc, #40]	; (8000588 <main+0xf4>)
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <main+0x104>)
 8000562:	f000 ffe5 	bl	8001530 <iprintf>

    	// bayrağı geçersiz kılmak
    	rxCmplt = RESET;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <main+0x100>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]

    	//  msg[] 'de indekslenen bir sonraki mesaja git
    	cnt ++;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3301      	adds	r3, #1
 8000570:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000572:	e7a5      	b.n	80004c0 <main+0x2c>
 8000574:	40004400 	.word	0x40004400
 8000578:	08002410 	.word	0x08002410
 800057c:	40020000 	.word	0x40020000
 8000580:	aaaaaaab 	.word	0xaaaaaaab
 8000584:	20000000 	.word	0x20000000
 8000588:	200000d4 	.word	0x200000d4
 800058c:	200000b0 	.word	0x200000b0
 8000590:	08002428 	.word	0x08002428
 8000594:	200000a4 	.word	0x200000a4
 8000598:	0800243c 	.word	0x0800243c

0800059c <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	USART_IRQHandling(&usart2_handle);
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <USART2_IRQHandler+0x10>)
 80005a2:	f000 fdf1 	bl	8001188 <USART_IRQHandling>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000b0 	.word	0x200000b0

080005b0 <USART_ApplicationEventCallback>:




void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle,uint8_t ApEv)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	70fb      	strb	r3, [r7, #3]
   if(ApEv == USART_EVENT_RX_CMPLT)
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d102      	bne.n	80005c8 <USART_ApplicationEventCallback+0x18>
   {
			rxCmplt = SET;
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <USART_ApplicationEventCallback+0x24>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	200000a4 	.word	0x200000a4

080005d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d8:	480d      	ldr	r0, [pc, #52]	; (8000610 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <LoopForever+0x6>)
  ldr r1, =_edata
 80005de:	490e      	ldr	r1, [pc, #56]	; (8000618 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <LoopForever+0xe>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f2:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f4:	4c0b      	ldr	r4, [pc, #44]	; (8000624 <LoopForever+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000602:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000606:	f000 ff67 	bl	80014d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060a:	f7ff ff43 	bl	8000494 <main>

0800060e <LoopForever>:

LoopForever:
    b LoopForever
 800060e:	e7fe      	b.n	800060e <LoopForever>
  ldr   r0, =_estack
 8000610:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000618:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800061c:	080024f0 	.word	0x080024f0
  ldr r2, =_sbss
 8000620:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000624:	200004d8 	.word	0x200004d8

08000628 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000628:	e7fe      	b.n	8000628 <ADC_IRQHandler>
	...

0800062c <GPIO_PeriClockControl>:
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d161      	bne.n	8000702 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a33      	ldr	r2, [pc, #204]	; (8000710 <GPIO_PeriClockControl+0xe4>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000646:	4b33      	ldr	r3, [pc, #204]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a32      	ldr	r2, [pc, #200]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
	else
	{
		//TODO
	}

}
 8000652:	e056      	b.n	8000702 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a30      	ldr	r2, [pc, #192]	; (8000718 <GPIO_PeriClockControl+0xec>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d106      	bne.n	800066a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a2c      	ldr	r2, [pc, #176]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 8000662:	f043 0302 	orr.w	r3, r3, #2
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000668:	e04b      	b.n	8000702 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4a2b      	ldr	r2, [pc, #172]	; (800071c <GPIO_PeriClockControl+0xf0>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d106      	bne.n	8000680 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000672:	4b28      	ldr	r3, [pc, #160]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a27      	ldr	r2, [pc, #156]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800067e:	e040      	b.n	8000702 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <GPIO_PeriClockControl+0xf4>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d106      	bne.n	8000696 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000694:	e035      	b.n	8000702 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <GPIO_PeriClockControl+0xf8>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d106      	bne.n	80006ac <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006a4:	f043 0310 	orr.w	r3, r3, #16
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006aa:	e02a      	b.n	8000702 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <GPIO_PeriClockControl+0xfc>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d106      	bne.n	80006c2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4a16      	ldr	r2, [pc, #88]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006ba:	f043 0320 	orr.w	r3, r3, #32
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c0:	e01f      	b.n	8000702 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a19      	ldr	r2, [pc, #100]	; (800072c <GPIO_PeriClockControl+0x100>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d106      	bne.n	80006d8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a11      	ldr	r2, [pc, #68]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006d6:	e014      	b.n	8000702 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <GPIO_PeriClockControl+0x104>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d106      	bne.n	80006ee <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ec:	e009      	b.n	8000702 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a10      	ldr	r2, [pc, #64]	; (8000734 <GPIO_PeriClockControl+0x108>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d105      	bne.n	8000702 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a06      	ldr	r2, [pc, #24]	; (8000714 <GPIO_PeriClockControl+0xe8>)
 80006fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40020000 	.word	0x40020000
 8000714:	40023800 	.word	0x40023800
 8000718:	40020400 	.word	0x40020400
 800071c:	40020800 	.word	0x40020800
 8000720:	40020c00 	.word	0x40020c00
 8000724:	40021000 	.word	0x40021000
 8000728:	40021400 	.word	0x40021400
 800072c:	40021800 	.word	0x40021800
 8000730:	40021c00 	.word	0x40021c00
 8000734:	40022000 	.word	0x40022000

08000738 <GPIO_Init>:
 * @return            -
 *
 * @Note              -
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2101      	movs	r1, #1
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff6e 	bl	800062c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	795b      	ldrb	r3, [r3, #5]
 8000754:	2b03      	cmp	r3, #3
 8000756:	d820      	bhi.n	800079a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	795b      	ldrb	r3, [r3, #5]
 800075c:	461a      	mov	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	2103      	movs	r1, #3
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	43db      	mvns	r3, r3
 800077e:	4619      	mov	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	400a      	ands	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6819      	ldr	r1, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	430a      	orrs	r2, r1
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	e0cb      	b.n	8000932 <GPIO_Init+0x1fa>

	}else
	{
		//(interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_FT)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b04      	cmp	r3, #4
 80007a0:	d117      	bne.n	80007d2 <GPIO_Init+0x9a>
		{
			//1. CONFIGURE THE FTSR(FTSR-->falling trigger selection register)
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a2:	4b4b      	ldr	r3, [pc, #300]	; (80008d0 <GPIO_Init+0x198>)
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	7912      	ldrb	r2, [r2, #4]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a47      	ldr	r2, [pc, #284]	; (80008d0 <GPIO_Init+0x198>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	60d3      	str	r3, [r2, #12]
			//FT yi yapılandırıken RT ye karşılık gelen biti temizlenmeli daha önceden yapılandırılmış olabilir RT
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b8:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <GPIO_Init+0x198>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	7912      	ldrb	r2, [r2, #4]
 80007c0:	4611      	mov	r1, r2
 80007c2:	2201      	movs	r2, #1
 80007c4:	408a      	lsls	r2, r1
 80007c6:	43d2      	mvns	r2, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a41      	ldr	r2, [pc, #260]	; (80008d0 <GPIO_Init+0x198>)
 80007cc:	400b      	ands	r3, r1
 80007ce:	6093      	str	r3, [r2, #8]
 80007d0:	e035      	b.n	800083e <GPIO_Init+0x106>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RT)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	795b      	ldrb	r3, [r3, #5]
 80007d6:	2b05      	cmp	r3, #5
 80007d8:	d117      	bne.n	800080a <GPIO_Init+0xd2>
		{
			// 1. CONFIGURE THE RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <GPIO_Init+0x198>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	7912      	ldrb	r2, [r2, #4]
 80007e2:	4611      	mov	r1, r2
 80007e4:	2201      	movs	r2, #1
 80007e6:	408a      	lsls	r2, r1
 80007e8:	4611      	mov	r1, r2
 80007ea:	4a39      	ldr	r2, [pc, #228]	; (80008d0 <GPIO_Init+0x198>)
 80007ec:	430b      	orrs	r3, r1
 80007ee:	6093      	str	r3, [r2, #8]
			//RT yi yapılandırıken FT ye karşılık gelen biti temizlenmeli daha önceden yapılandırılmış olabilir RT
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f0:	4b37      	ldr	r3, [pc, #220]	; (80008d0 <GPIO_Init+0x198>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	7912      	ldrb	r2, [r2, #4]
 80007f8:	4611      	mov	r1, r2
 80007fa:	2201      	movs	r2, #1
 80007fc:	408a      	lsls	r2, r1
 80007fe:	43d2      	mvns	r2, r2
 8000800:	4611      	mov	r1, r2
 8000802:	4a33      	ldr	r2, [pc, #204]	; (80008d0 <GPIO_Init+0x198>)
 8000804:	400b      	ands	r3, r1
 8000806:	60d3      	str	r3, [r2, #12]
 8000808:	e019      	b.n	800083e <GPIO_Init+0x106>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode==GPIO_MODE_IT_RFT)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	795b      	ldrb	r3, [r3, #5]
 800080e:	2b06      	cmp	r3, #6
 8000810:	d115      	bne.n	800083e <GPIO_Init+0x106>
		{
			//1. CONFIGURE BOTH RTSR AND FTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <GPIO_Init+0x198>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	7912      	ldrb	r2, [r2, #4]
 800081a:	4611      	mov	r1, r2
 800081c:	2201      	movs	r2, #1
 800081e:	408a      	lsls	r2, r1
 8000820:	4611      	mov	r1, r2
 8000822:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <GPIO_Init+0x198>)
 8000824:	430b      	orrs	r3, r1
 8000826:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <GPIO_Init+0x198>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	7912      	ldrb	r2, [r2, #4]
 8000830:	4611      	mov	r1, r2
 8000832:	2201      	movs	r2, #1
 8000834:	408a      	lsls	r2, r1
 8000836:	4611      	mov	r1, r2
 8000838:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <GPIO_Init+0x198>)
 800083a:	430b      	orrs	r3, r1
 800083c:	60d3      	str	r3, [r2, #12]
		}

		//2. SYSCFG_EXTICR'de GPIO bağlantı noktası seçimini yapılandırın

		uint8_t temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	089b      	lsrs	r3, r3, #2
 8000844:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	f003 0303 	and.w	r3, r3, #3
 800084e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <GPIO_Init+0x19c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d04e      	beq.n	80008f8 <GPIO_Init+0x1c0>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <GPIO_Init+0x1a0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d032      	beq.n	80008ca <GPIO_Init+0x192>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <GPIO_Init+0x1a4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d02b      	beq.n	80008c6 <GPIO_Init+0x18e>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <GPIO_Init+0x1a8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d024      	beq.n	80008c2 <GPIO_Init+0x18a>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <GPIO_Init+0x1ac>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d01d      	beq.n	80008be <GPIO_Init+0x186>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <GPIO_Init+0x1b0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d016      	beq.n	80008ba <GPIO_Init+0x182>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a16      	ldr	r2, [pc, #88]	; (80008ec <GPIO_Init+0x1b4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d00f      	beq.n	80008b6 <GPIO_Init+0x17e>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <GPIO_Init+0x1b8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d008      	beq.n	80008b2 <GPIO_Init+0x17a>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <GPIO_Init+0x1bc>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d101      	bne.n	80008ae <GPIO_Init+0x176>
 80008aa:	2308      	movs	r3, #8
 80008ac:	e025      	b.n	80008fa <GPIO_Init+0x1c2>
 80008ae:	2300      	movs	r3, #0
 80008b0:	e023      	b.n	80008fa <GPIO_Init+0x1c2>
 80008b2:	2307      	movs	r3, #7
 80008b4:	e021      	b.n	80008fa <GPIO_Init+0x1c2>
 80008b6:	2306      	movs	r3, #6
 80008b8:	e01f      	b.n	80008fa <GPIO_Init+0x1c2>
 80008ba:	2305      	movs	r3, #5
 80008bc:	e01d      	b.n	80008fa <GPIO_Init+0x1c2>
 80008be:	2304      	movs	r3, #4
 80008c0:	e01b      	b.n	80008fa <GPIO_Init+0x1c2>
 80008c2:	2303      	movs	r3, #3
 80008c4:	e019      	b.n	80008fa <GPIO_Init+0x1c2>
 80008c6:	2302      	movs	r3, #2
 80008c8:	e017      	b.n	80008fa <GPIO_Init+0x1c2>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e015      	b.n	80008fa <GPIO_Init+0x1c2>
 80008ce:	bf00      	nop
 80008d0:	40013c00 	.word	0x40013c00
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020400 	.word	0x40020400
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40021400 	.word	0x40021400
 80008ec:	40021800 	.word	0x40021800
 80008f0:	40021c00 	.word	0x40021c00
 80008f4:	40022000 	.word	0x40022000
 80008f8:	2300      	movs	r3, #0
 80008fa:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80008fc:	4b5c      	ldr	r3, [pc, #368]	; (8000a70 <GPIO_Init+0x338>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	4a5b      	ldr	r2, [pc, #364]	; (8000a70 <GPIO_Init+0x338>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000906:	6453      	str	r3, [r2, #68]	; 0x44
        SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000908:	7c7a      	ldrb	r2, [r7, #17]
 800090a:	7cbb      	ldrb	r3, [r7, #18]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	fa02 f103 	lsl.w	r1, r2, r3
 8000912:	4a58      	ldr	r2, [pc, #352]	; (8000a74 <GPIO_Init+0x33c>)
 8000914:	7cfb      	ldrb	r3, [r7, #19]
 8000916:	3302      	adds	r3, #2
 8000918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]



		//3. IMR kullanarak exti interrupt dağıtımını etkinleştir
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800091c:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <GPIO_Init+0x340>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	7912      	ldrb	r2, [r2, #4]
 8000924:	4611      	mov	r1, r2
 8000926:	2201      	movs	r2, #1
 8000928:	408a      	lsls	r2, r1
 800092a:	4611      	mov	r1, r2
 800092c:	4a52      	ldr	r2, [pc, #328]	; (8000a78 <GPIO_Init+0x340>)
 800092e:	430b      	orrs	r3, r1
 8000930:	6013      	str	r3, [r2, #0]
	}

	 temp=0;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	799b      	ldrb	r3, [r3, #6]
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	2103      	movs	r1, #3
 8000956:	fa01 f303 	lsl.w	r3, r1, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	4619      	mov	r1, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	400a      	ands	r2, r1
 8000964:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6899      	ldr	r1, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	430a      	orrs	r2, r1
 8000974:	609a      	str	r2, [r3, #8]
     temp=0;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	79db      	ldrb	r3, [r3, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	791b      	ldrb	r3, [r3, #4]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	791b      	ldrb	r3, [r3, #4]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2103      	movs	r1, #3
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	4619      	mov	r1, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	400a      	ands	r2, r1
 80009a8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68d9      	ldr	r1, [r3, #12]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	60da      	str	r2, [r3, #12]

      temp=0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7a1b      	ldrb	r3, [r3, #8]
 80009c2:	461a      	mov	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	791b      	ldrb	r3, [r3, #4]
 80009d8:	4619      	mov	r1, r3
 80009da:	2301      	movs	r3, #1
 80009dc:	408b      	lsls	r3, r1
 80009de:	43db      	mvns	r3, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	400a      	ands	r2, r1
 80009e8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6859      	ldr	r1, [r3, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	795b      	ldrb	r3, [r3, #5]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d131      	bne.n	8000a66 <GPIO_Init+0x32e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	08db      	lsrs	r3, r3, #3
 8000a08:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	7c3a      	ldrb	r2, [r7, #16]
 8000a1a:	3208      	adds	r2, #8
 8000a1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	220f      	movs	r2, #15
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	7c3a      	ldrb	r2, [r7, #16]
 8000a34:	4001      	ands	r1, r0
 8000a36:	3208      	adds	r2, #8
 8000a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	7c3a      	ldrb	r2, [r7, #16]
 8000a42:	3208      	adds	r2, #8
 8000a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7a5b      	ldrb	r3, [r3, #9]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	4618      	mov	r0, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7c3a      	ldrb	r2, [r7, #16]
 8000a5e:	4301      	orrs	r1, r0
 8000a60:	3208      	adds	r2, #8
 8000a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000a66:	bf00      	nop
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40013800 	.word	0x40013800
 8000a78:	40013c00 	.word	0x40013c00

08000a7c <GPIO_ReadFromInputPin>:
 * @return            -   0 or 1
 *
 * @Note              -
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691a      	ldr	r2, [r3, #16]
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]

   return value;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)  //her zaman Pclk1=16MHz olmal zorunda degil kullanıcı degistirebilir.seri saat üretimi yaparken
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <RCC_GetPCLK1Value+0x9c>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000abc:	7a7b      	ldrb	r3, [r7, #9]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d102      	bne.n	8000ac8 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <RCC_GetPCLK1Value+0xa0>)
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e00b      	b.n	8000ae0 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000ac8:	7a7b      	ldrb	r3, [r7, #9]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d102      	bne.n	8000ad4 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <RCC_GetPCLK1Value+0xa4>)
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e005      	b.n	8000ae0 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000ad4:	7a7b      	ldrb	r3, [r7, #9]
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d102      	bne.n	8000ae0 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000ada:	f000 f88d 	bl	8000bf8 <RCC_GetPLLOutputClock>
 8000ade:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <RCC_GetPCLK1Value+0x9c>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	091b      	lsrs	r3, r3, #4
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000aee:	7a3b      	ldrb	r3, [r7, #8]
 8000af0:	2b07      	cmp	r3, #7
 8000af2:	d802      	bhi.n	8000afa <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	72fb      	strb	r3, [r7, #11]
 8000af8:	e005      	b.n	8000b06 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000afa:	7a3b      	ldrb	r3, [r7, #8]
 8000afc:	3b08      	subs	r3, #8
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <RCC_GetPCLK1Value+0xa8>)
 8000b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b04:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <RCC_GetPCLK1Value+0x9c>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	0a9b      	lsrs	r3, r3, #10
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000b14:	7a3b      	ldrb	r3, [r7, #8]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d802      	bhi.n	8000b20 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	72bb      	strb	r3, [r7, #10]
 8000b1e:	e004      	b.n	8000b2a <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000b20:	7a3b      	ldrb	r3, [r7, #8]
 8000b22:	3b04      	subs	r3, #4
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <RCC_GetPCLK1Value+0xac>)
 8000b26:	5cd3      	ldrb	r3, [r2, r3]
 8000b28:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 8000b2a:	7afb      	ldrb	r3, [r7, #11]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b32:	7abb      	ldrb	r3, [r7, #10]
 8000b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b38:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000b3a:	687b      	ldr	r3, [r7, #4]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	00f42400 	.word	0x00f42400
 8000b4c:	007a1200 	.word	0x007a1200
 8000b50:	2000000c 	.word	0x2000000c
 8000b54:	2000001c 	.word	0x2000001c

08000b58 <RCC_GetPCLK2Value>:
 * @return            -
 *
 * @Note              -
 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <RCC_GetPCLK2Value+0x8c>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	f003 0303 	and.w	r3, r3, #3
 8000b6e:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000b70:	7a7b      	ldrb	r3, [r7, #9]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <RCC_GetPCLK2Value+0x90>)
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	e001      	b.n	8000b80 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <RCC_GetPCLK2Value+0x94>)
 8000b7e:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000b80:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <RCC_GetPCLK2Value+0x8c>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	091b      	lsrs	r3, r3, #4
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	d802      	bhi.n	8000b98 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	72fb      	strb	r3, [r7, #11]
 8000b96:	e005      	b.n	8000ba4 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b08      	subs	r3, #8
 8000b9c:	4a14      	ldr	r2, [pc, #80]	; (8000bf0 <RCC_GetPCLK2Value+0x98>)
 8000b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba2:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <RCC_GetPCLK2Value+0x8c>)
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	0b5b      	lsrs	r3, r3, #13
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d802      	bhi.n	8000bbc <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	72bb      	strb	r3, [r7, #10]
 8000bba:	e004      	b.n	8000bc6 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b04      	subs	r3, #4
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <RCC_GetPCLK2Value+0x9c>)
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bce:	7abb      	ldrb	r3, [r7, #10]
 8000bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd4:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000bd6:	683b      	ldr	r3, [r7, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40023800 	.word	0x40023800
 8000be8:	00f42400 	.word	0x00f42400
 8000bec:	007a1200 	.word	0x007a1200
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	2000001c 	.word	0x2000001c

08000bf8 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <USART_SetBaudRate>:
 * @return            -
 *
 * @Note              -
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	// Mantissa ve Kesir değerlerini tutacak değişkenler
	uint32_t M_part, F_part;

  uint32_t tempreg = 0 ;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]

  // APB veri yolu saatinin değerini PCLKx değişkenine alın
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a31      	ldr	r2, [pc, #196]	; (8000ce0 <USART_SetBaudRate+0xd8>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d003      	beq.n	8000c26 <USART_SetBaudRate+0x1e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <USART_SetBaudRate+0xdc>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d103      	bne.n	8000c2e <USART_SetBaudRate+0x26>
  {
	   // USART1 ve USART6, APB2 veri yolunda asılı
	   PCLKx = RCC_GetPCLK2Value ();
 8000c26:	f7ff ff97 	bl	8000b58 <RCC_GetPCLK2Value>
 8000c2a:	61f8      	str	r0, [r7, #28]
 8000c2c:	e002      	b.n	8000c34 <USART_SetBaudRate+0x2c>
  } else
  {
	   PCLKx = RCC_GetPCLK1Value ();
 8000c2e:	f7ff ff3b 	bl	8000aa8 <RCC_GetPCLK1Value>
 8000c32:	61f8      	str	r0, [r7, #28]
  }

  // OVER8 yapılandırma bitini kontrol edin
  if(pUSARTx-> CR1 & ( 1 << USART_CR1_OVER8))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d00b      	beq.n	8000c58 <USART_SetBaudRate+0x50>
  {
	   // OVER8 = 1, 8 ile fazla örnekleme
	   usartdiv = (( 25 * PCLKx) / ( 2 * BaudRate));
 8000c40:	69fa      	ldr	r2, [r7, #28]
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	009a      	lsls	r2, r3, #2
 8000c4a:	441a      	add	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	e00a      	b.n	8000c6e <USART_SetBaudRate+0x66>
  } else
  {
	   // 16 ile fazla örnekleme
	   usartdiv = (( 25 * PCLKx) / ( 4 * BaudRate));
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	009a      	lsls	r2, r3, #2
 8000c62:	441a      	add	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	61bb      	str	r3, [r7, #24]
  }

  // Mantissa bölümünü hesaplayın
  M_part = usartdiv / 100 ;
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <USART_SetBaudRate+0xe0>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	60fb      	str	r3, [r7, #12]

  // Mantissa parçasını uygun bit konumuna yerleştirin. USART_BRR'ye bakın
  tempreg |= M_part << 4 ;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]

  // Kesir kısmını çıkar
  F_part = (usartdiv - (M_part * 100 ));
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2264      	movs	r2, #100	; 0x64
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	617b      	str	r3, [r7, #20]

  // Son kesiri hesapla
  if (pUSARTx-> CR1 & ( 1 << USART_CR1_OVER8))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00a      	beq.n	8000cb4 <USART_SetBaudRate+0xac>
   {
	  // OVER8 = 1, 8 ile fazla örnekleme /*OVER8 = 1 olduğunda,DIV_Fraction3 biti dikkate alınmaz ve temiz tutulmalıdır. bu yüzden 0x07 ile maskeleme yaptık.referans kılavuzu USART_BRR kaydında yazıyor*/
	  F_part = (((F_part * 8 ) + 50 ) / 100 ) & (( uint8_t ) 0x07 );
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	00db      	lsls	r3, r3, #3
 8000ca2:	3332      	adds	r3, #50	; 0x32
 8000ca4:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <USART_SetBaudRate+0xe0>)
 8000ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e009      	b.n	8000cc8 <USART_SetBaudRate+0xc0>

   } else
   {
	   // 16 ile fazla örnekleme
	   F_part = (((F_part * 16 ) + 50 ) / 100 ) & (( uint8_t ) 0x0F );
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	3332      	adds	r3, #50	; 0x32
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <USART_SetBaudRate+0xe0>)
 8000cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc0:	095b      	lsrs	r3, r3, #5
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	617b      	str	r3, [r7, #20]

   }

  // Kesirli parçayı uygun bit konumuna yerleştirin. USART_BRR'ye bakın
  tempreg |= F_part;
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]

  // tempreg değerini BRR yazmacına kopyala
  pUSARTx-> BRR = tempreg;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	609a      	str	r2, [r3, #8]

}
 8000cd6:	bf00      	nop
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40011400 	.word	0x40011400
 8000ce8:	51eb851f 	.word	0x51eb851f

08000cec <USART_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000cf8:	78fb      	ldrb	r3, [r7, #3]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d106      	bne.n	8000d0c <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}

}
 8000d0a:	e005      	b.n	8000d18 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60da      	str	r2, [r3, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <USART_Init>:
 * @return            -
 *
 * @Note              -
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	// Geçici değişken
	uint32_t tempreg = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

	// Verilen USART çevre birimi için Saati etkinleştirmek için kodu uygulayın
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f8ee 	bl	8000f18 <USART_PeriClockControl>

	// USART_Mode yapılandırma öğesine göre USART Tx ve Rx motorlarını etkinleştirin
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	791b      	ldrb	r3, [r3, #4]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d104      	bne.n	8000d4e <USART_Init+0x2a>
	{
		// Alıcı bit alanını etkinleştirmek için kodu uygulayın
		tempreg |=(1 << USART_CR1_RE);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e010      	b.n	8000d70 <USART_Init+0x4c>

	}else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	791b      	ldrb	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d104      	bne.n	8000d60 <USART_Init+0x3c>
	{
		// Verici bit alanını etkinleştirmek için kodu uygulayın
		tempreg |= (1 << USART_CR1_TE);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	e007      	b.n	8000d70 <USART_Init+0x4c>

	}else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d103      	bne.n	8000d70 <USART_Init+0x4c>
	{
		// Hem Verici hem de Alıcı bit alanlarını etkinleştirmek için kodu uygulayın
		tempreg |= ( (1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 030c 	orr.w	r3, r3, #12
 8000d6e:	60fb      	str	r3, [r7, #12]
	}

	// Kelime uzunluğu yapılandırma öğesini yapılandırmak için kodu uygulayın
	tempreg |=pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7b5b      	ldrb	r3, [r3, #13]
 8000d74:	031b      	lsls	r3, r3, #12
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]


	// Eşlik kontrol bit alanlarının konfigürasyonu
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7b9b      	ldrb	r3, [r3, #14]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d104      	bne.n	8000d90 <USART_Init+0x6c>
	{
		// Eşlik kontrolünü etkinleştirmek için kodu uygulayın
		tempreg |=(1 << USART_CR1_PCE);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e00b      	b.n	8000da8 <USART_Init+0x84>

		// EVEN eşliğini etkinleştirmek için kodu uygulayın
		// Gerekli değil çünkü varsayılan olarak, eşlik kontrolünü etkinleştirdiğinizde EVEN eşlik seçilecek

	}else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7b9b      	ldrb	r3, [r3, #14]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d107      	bne.n	8000da8 <USART_Init+0x84>
	{
		// Eşlik kontrolünü etkinleştirmek için kodu uygulayın
		tempreg |=(1 << USART_CR1_PCE);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	60fb      	str	r3, [r7, #12]
	    // ODD eşliğini etkinleştirmek için kodu uygulayın
		tempreg |=(1 << USART_CR1_PS);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	60fb      	str	r3, [r7, #12]
	}

	// CR1 kaydını programlayın
	pUSARTHandle->pUSARTx->CR1=tempreg;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	60da      	str	r2, [r3, #12]

	/* ******************************* CR2 yapılandırması ************** *************************** */

	tempreg=0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]

	// USART çerçeve iletimi sırasında eklenen durdurma bitlerinin sayısını yapılandırmak için kodu uygulayın
	tempreg |=pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7b1b      	ldrb	r3, [r3, #12]
 8000db8:	031b      	lsls	r3, r3, #12
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]

	// CR2 kaydını programlayın
	pUSARTHandle-> pUSARTx -> CR2 = tempreg;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	611a      	str	r2, [r3, #16]


	/* ******************************* CR3 Yapılandırması ************** *************************** */

	tempreg=0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]

	// USART donanım akış kontrolünün konfigürasyonu
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7bdb      	ldrb	r3, [r3, #15]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d104      	bne.n	8000de0 <USART_Init+0xbc>
	{
		// CTS akış kontrolünü etkinleştirmek için kodu uygulayın
		tempreg |=(1 << USART_CR3_CTSE);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e014      	b.n	8000e0a <USART_Init+0xe6>

	}else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7bdb      	ldrb	r3, [r3, #15]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d104      	bne.n	8000df2 <USART_Init+0xce>
	{
		// RTS akış kontrolünü etkinleştirmek için kodu uygulayın
		tempreg |=(1 << USART_CR3_RTSE);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e00b      	b.n	8000e0a <USART_Init+0xe6>
	}else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7bdb      	ldrb	r3, [r3, #15]
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d107      	bne.n	8000e0a <USART_Init+0xe6>
	{
		// Hem CTS hem de RTS Akış kontrolünü etkinleştirmek için kodu uygulayın
		tempreg |=(1 << USART_CR3_CTSE);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e00:	60fb      	str	r3, [r7, #12]
		tempreg |=(1 << USART_CR3_RTSE);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	60fb      	str	r3, [r7, #12]

	}

	pUSARTHandle->pUSARTx->CR3=tempreg;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	615a      	str	r2, [r3, #20]

	/* ******************************* BRR Yapılandırması (Baudrate kaydı) ********** ******************************** */

		// Baud hızını yapılandırmak için kodu uygulayın
	USART_SetBaudRate(pUSARTHandle-> pUSARTx , pUSARTHandle-> USART_Config.USART_Baud );
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	f7ff fef3 	bl	8000c08 <USART_SetBaudRate>

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <USART_SendData>:




void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   // "Len" bayt sayısı aktarılıncaya kadar döngü yapın
	for( uint32_t i = 0 ; i <Len; i ++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e031      	b.n	8000ea0 <USART_SendData+0x76>
	{
		// SR'de TXE bayrağı ayarlanana kadar beklemek için kodu uygulayın
		while (! USART_GetFlagStatus (pUSARTHandle-> pUSARTx , USART_FLAG_TXE));
 8000e3c:	bf00      	nop
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f907 	bl	8001058 <USART_GetFlagStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f6      	beq.n	8000e3e <USART_SendData+0x14>

		// Bir çerçevede 9BIT veya 8BIT için USART_WordLength öğesini kontrol edin
		if(pUSARTHandle-> USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	7b5b      	ldrb	r3, [r3, #13]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d118      	bne.n	8000e8a <USART_SendData+0x60>
		{
			// eğer 9BIT, DR'yi ilk 9 bit dışındaki bitleri maskeleyen 2 bayt ile yüklerse
			pdata = ( uint16_t*) pTxBuffer;
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	613b      	str	r3, [r7, #16]
			pUSARTHandle-> pUSARTx ->DR= (*pdata & ( uint16_t ) 0x01FF );
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e6a:	605a      	str	r2, [r3, #4]

			// USART_ParityControl için kontrol edin
			if(pUSARTHandle-> USART_Config . USART_ParityControl == USART_PARITY_DISABLE)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	7b9b      	ldrb	r3, [r3, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d106      	bne.n	8000e82 <USART_SendData+0x58>
			{
				// Bu transferde parite kullanılmadığından 9 bitlik kullanıcı verisi gönderilecektir
				// pTxBuffer'ı iki kez artırmak için kodu uygulayın
				pTxBuffer++;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	e00b      	b.n	8000e9a <USART_SendData+0x70>
			}
			else
			{
				// Bu transferde eşlik biti kullanılır. böylece 8 bit kullanıcı verisi gönderilecek
				// 9. bit, donanım tarafından eşlik biti ile değiştirilecektir
				pTxBuffer ++;
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	3301      	adds	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	e007      	b.n	8000e9a <USART_SendData+0x70>
			}
		}
		else
		{
			// Bu 8 bit veri aktarımıdır
			pUSARTHandle-> pUSARTx ->DR = (*pTxBuffer & ( uint8_t ) 0xFF );
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]

			// Tampon adresini artırmak için kodu uygulayın
			pTxBuffer++;
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
	for( uint32_t i = 0 ; i <Len; i ++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d3c9      	bcc.n	8000e3c <USART_SendData+0x12>
		}
	}

	// SR'de TC bayrağı ayarlanana kadar beklemek için kodu uygulayın
	while (! USART_GetFlagStatus (pUSARTHandle-> pUSARTx , USART_FLAG_TC));
 8000ea8:	bf00      	nop
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2140      	movs	r1, #64	; 0x40
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f8d1 	bl	8001058 <USART_GetFlagStatus>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f6      	beq.n	8000eaa <USART_SendData+0x80>

}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <USART_ReceiveDataIT>:
 * @return            -
 *
 * @Note              -
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]

	uint8_t rxstate = pUSARTHandle-> RxBusyState ;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed6:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d014      	beq.n	8000f08 <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle-> RxLen = Len;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	61da      	str	r2, [r3, #28]
		pUSARTHandle-> pRxBuffer = pRxBuffer;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	615a      	str	r2, [r3, #20]
		pUSARTHandle-> RxBusyState = USART_BUSY_IN_RX;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2201      	movs	r2, #1
 8000eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		(void) pUSARTHandle-> pUSARTx -> DR ;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]

		// RXNE için kesmeyi etkinleştirmek için kodu uygulayın
		pUSARTHandle-> pUSARTx -> CR1 |= ( 1 << USART_CR1_RXNEIE);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0220 	orr.w	r2, r2, #32
 8000f06:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000f08:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <USART_PeriClockControl>:




void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d141      	bne.n	8000fae <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a43      	ldr	r2, [pc, #268]	; (800103c <USART_PeriClockControl+0x124>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d106      	bne.n	8000f40 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000f32:	4b43      	ldr	r3, [pc, #268]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a42      	ldr	r2, [pc, #264]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f38:	f043 0310 	orr.w	r3, r3, #16
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
		}else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8000f3e:	e077      	b.n	8001030 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a40      	ldr	r2, [pc, #256]	; (8001044 <USART_PeriClockControl+0x12c>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d106      	bne.n	8000f56 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000f48:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a3c      	ldr	r2, [pc, #240]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f54:	e06c      	b.n	8001030 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART3)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a3b      	ldr	r2, [pc, #236]	; (8001048 <USART_PeriClockControl+0x130>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d106      	bne.n	8000f6c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	4a37      	ldr	r2, [pc, #220]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f6a:	e061      	b.n	8001030 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a37      	ldr	r2, [pc, #220]	; (800104c <USART_PeriClockControl+0x134>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d106      	bne.n	8000f82 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a31      	ldr	r2, [pc, #196]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f80:	e056      	b.n	8001030 <USART_PeriClockControl+0x118>
		}else if(pUSARTx == UART5)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a32      	ldr	r2, [pc, #200]	; (8001050 <USART_PeriClockControl+0x138>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d106      	bne.n	8000f98 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a2c      	ldr	r2, [pc, #176]	; (8001040 <USART_PeriClockControl+0x128>)
 8000f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f96:	e04b      	b.n	8001030 <USART_PeriClockControl+0x118>
		}else if(pUSARTx == USART6)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a2e      	ldr	r2, [pc, #184]	; (8001054 <USART_PeriClockControl+0x13c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d147      	bne.n	8001030 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <USART_PeriClockControl+0x128>)
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa4:	4a26      	ldr	r2, [pc, #152]	; (8001040 <USART_PeriClockControl+0x128>)
 8000fa6:	f043 0320 	orr.w	r3, r3, #32
 8000faa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fac:	e040      	b.n	8001030 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <USART_PeriClockControl+0x124>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d106      	bne.n	8000fc4 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <USART_PeriClockControl+0x128>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <USART_PeriClockControl+0x128>)
 8000fbc:	f023 0310 	bic.w	r3, r3, #16
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000fc2:	e035      	b.n	8001030 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <USART_PeriClockControl+0x12c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d106      	bne.n	8000fda <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <USART_PeriClockControl+0x128>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <USART_PeriClockControl+0x128>)
 8000fd2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fd8:	e02a      	b.n	8001030 <USART_PeriClockControl+0x118>
		}else if (pUSARTx == USART3)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <USART_PeriClockControl+0x130>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d106      	bne.n	8000ff0 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <USART_PeriClockControl+0x128>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a16      	ldr	r2, [pc, #88]	; (8001040 <USART_PeriClockControl+0x128>)
 8000fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fee:	e01f      	b.n	8001030 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <USART_PeriClockControl+0x134>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d106      	bne.n	8001006 <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <USART_PeriClockControl+0x128>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a10      	ldr	r2, [pc, #64]	; (8001040 <USART_PeriClockControl+0x128>)
 8000ffe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001004:	e014      	b.n	8001030 <USART_PeriClockControl+0x118>
		}else if(pUSARTx == UART5)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a11      	ldr	r2, [pc, #68]	; (8001050 <USART_PeriClockControl+0x138>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d106      	bne.n	800101c <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <USART_PeriClockControl+0x128>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a0b      	ldr	r2, [pc, #44]	; (8001040 <USART_PeriClockControl+0x128>)
 8001014:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
}
 800101a:	e009      	b.n	8001030 <USART_PeriClockControl+0x118>
		}else if(pUSARTx == USART6)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <USART_PeriClockControl+0x13c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d105      	bne.n	8001030 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <USART_PeriClockControl+0x128>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <USART_PeriClockControl+0x128>)
 800102a:	f023 0320 	bic.w	r3, r3, #32
 800102e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40011000 	.word	0x40011000
 8001040:	40023800 	.word	0x40023800
 8001044:	40004400 	.word	0x40004400
 8001048:	40004800 	.word	0x40004800
 800104c:	40004c00 	.word	0x40004c00
 8001050:	40005000 	.word	0x40005000
 8001054:	40011400 	.word	0x40011400

08001058 <USART_GetFlagStatus>:
 * @return            -
 *
 * @Note              -
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <USART_IRQInterruptConfig>:
 * @return            -
 *
 * @Note              -
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d133      	bne.n	8001102 <USART_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b1f      	cmp	r3, #31
 800109e:	d80a      	bhi.n	80010b6 <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80010a0:	4b35      	ldr	r3, [pc, #212]	; (8001178 <USART_IRQInterruptConfig+0xf4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	2101      	movs	r1, #1
 80010a8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ac:	4611      	mov	r1, r2
 80010ae:	4a32      	ldr	r2, [pc, #200]	; (8001178 <USART_IRQInterruptConfig+0xf4>)
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 80010b4:	e059      	b.n	800116a <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b1f      	cmp	r3, #31
 80010ba:	d90f      	bls.n	80010dc <USART_IRQInterruptConfig+0x58>
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	2b3f      	cmp	r3, #63	; 0x3f
 80010c0:	d80c      	bhi.n	80010dc <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <USART_IRQInterruptConfig+0xf8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	79fa      	ldrb	r2, [r7, #7]
 80010c8:	f002 021f 	and.w	r2, r2, #31
 80010cc:	2101      	movs	r1, #1
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	4611      	mov	r1, r2
 80010d4:	4a29      	ldr	r2, [pc, #164]	; (800117c <USART_IRQInterruptConfig+0xf8>)
 80010d6:	430b      	orrs	r3, r1
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e046      	b.n	800116a <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b3f      	cmp	r3, #63	; 0x3f
 80010e0:	d943      	bls.n	800116a <USART_IRQInterruptConfig+0xe6>
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2b5f      	cmp	r3, #95	; 0x5f
 80010e6:	d840      	bhi.n	800116a <USART_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 80010e8:	4b25      	ldr	r3, [pc, #148]	; (8001180 <USART_IRQInterruptConfig+0xfc>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	79fa      	ldrb	r2, [r7, #7]
 80010ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	4611      	mov	r1, r2
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <USART_IRQInterruptConfig+0xfc>)
 80010fc:	430b      	orrs	r3, r1
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	e033      	b.n	800116a <USART_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b1f      	cmp	r3, #31
 8001106:	d80a      	bhi.n	800111e <USART_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <USART_IRQInterruptConfig+0x100>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	79fa      	ldrb	r2, [r7, #7]
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	4611      	mov	r1, r2
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <USART_IRQInterruptConfig+0x100>)
 8001118:	430b      	orrs	r3, r1
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	e025      	b.n	800116a <USART_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b1f      	cmp	r3, #31
 8001122:	d90f      	bls.n	8001144 <USART_IRQInterruptConfig+0xc0>
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b3f      	cmp	r3, #63	; 0x3f
 8001128:	d80c      	bhi.n	8001144 <USART_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <USART_IRQInterruptConfig+0xf8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	f002 021f 	and.w	r2, r2, #31
 8001134:	2101      	movs	r1, #1
 8001136:	fa01 f202 	lsl.w	r2, r1, r2
 800113a:	4611      	mov	r1, r2
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <USART_IRQInterruptConfig+0xf8>)
 800113e:	430b      	orrs	r3, r1
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e012      	b.n	800116a <USART_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d90f      	bls.n	800116a <USART_IRQInterruptConfig+0xe6>
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b5f      	cmp	r3, #95	; 0x5f
 800114e:	d80c      	bhi.n	800116a <USART_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <USART_IRQInterruptConfig+0xfc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800115a:	2101      	movs	r1, #1
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	4611      	mov	r1, r2
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <USART_IRQInterruptConfig+0xfc>)
 8001164:	430b      	orrs	r3, r1
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	e7ff      	b.n	800116a <USART_IRQInterruptConfig+0xe6>
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000e104 	.word	0xe000e104
 8001180:	e000e10c 	.word	0xe000e10c
 8001184:	e000e180 	.word	0xe000e180

08001188 <USART_IRQHandling>:
 * @return            -
 *
 * @Note              -
 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119a:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a6:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d021      	beq.n	80011f2 <USART_IRQHandling+0x6a>
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d01e      	beq.n	80011f2 <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d119      	bne.n	80011f2 <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d115      	bne.n	80011f2 <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011d4:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 80011ea:	2100      	movs	r1, #0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff f9df 	bl	80005b0 <USART_ApplicationEventCallback>
	}

/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001208:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d055      	beq.n	80012bc <USART_IRQHandling+0x134>
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d052      	beq.n	80012bc <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d14d      	bne.n	80012bc <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d03d      	beq.n	80012a4 <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7b5b      	ldrb	r3, [r3, #13]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d129      	bne.n	8001284 <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001244:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7b9b      	ldrb	r3, [r3, #14]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	1e9a      	subs	r2, r3, #2
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	e01a      	b.n	80012a4 <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	1e5a      	subs	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
 8001282:	e00f      	b.n	80012a4 <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	1e5a      	subs	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012ba:	60da      	str	r2, [r3, #12]
		}
	}

/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d073      	beq.n	80013c2 <USART_IRQHandling+0x23a>
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d070      	beq.n	80013c2 <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d16b      	bne.n	80013c2 <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d053      	beq.n	800139a <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7b5b      	ldrb	r3, [r3, #13]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d12f      	bne.n	800135a <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7b9b      	ldrb	r3, [r3, #14]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d119      	bne.n	8001336 <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	b29a      	uxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001312:	b292      	uxth	r2, r2
 8001314:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	1e9a      	subs	r2, r3, #2
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	61da      	str	r2, [r3, #28]
 8001334:	e031      	b.n	800139a <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	1e5a      	subs	r2, r3, #1
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	61da      	str	r2, [r3, #28]
 8001358:	e01f      	b.n	800139a <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7b9b      	ldrb	r3, [r3, #14]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d107      	bne.n	8001372 <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e009      	b.n	8001386 <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	1e5a      	subs	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10f      	bne.n	80013c2 <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0220 	bic.w	r2, r2, #32
 80013b0:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 80013ba:	2101      	movs	r1, #1
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff f8f7 	bl	80005b0 <USART_ApplicationEventCallback>

/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013cc:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d8:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e4:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00e      	beq.n	800140a <USART_IRQHandling+0x282>
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001400:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8001402:	2103      	movs	r1, #3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff f8d3 	bl	80005b0 <USART_ApplicationEventCallback>
	}

/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00f      	beq.n	8001448 <USART_IRQHandling+0x2c0>
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	f023 0310 	bic.w	r3, r3, #16
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8001440:	2102      	movs	r1, #2
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff f8b4 	bl	80005b0 <USART_ApplicationEventCallback>
	}

/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f003 0305 	and.w	r3, r3, #5
 800145e:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <USART_IRQHandling+0x2ec>
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 800146c:	2107      	movs	r1, #7
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff f89e 	bl	80005b0 <USART_ApplicationEventCallback>

//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01e      	beq.n	80014c4 <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8001498:	2105      	movs	r1, #5
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff f888 	bl	80005b0 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NE) )
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 80014aa:	2106      	movs	r1, #6
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff f87f 	bl	80005b0 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 80014bc:	2107      	movs	r1, #7
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff f876 	bl	80005b0 <USART_ApplicationEventCallback>
		}
	}


}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <__errno>:
 80014cc:	4b01      	ldr	r3, [pc, #4]	; (80014d4 <__errno+0x8>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000020 	.word	0x20000020

080014d8 <__libc_init_array>:
 80014d8:	b570      	push	{r4, r5, r6, lr}
 80014da:	4e0d      	ldr	r6, [pc, #52]	; (8001510 <__libc_init_array+0x38>)
 80014dc:	4c0d      	ldr	r4, [pc, #52]	; (8001514 <__libc_init_array+0x3c>)
 80014de:	1ba4      	subs	r4, r4, r6
 80014e0:	10a4      	asrs	r4, r4, #2
 80014e2:	2500      	movs	r5, #0
 80014e4:	42a5      	cmp	r5, r4
 80014e6:	d109      	bne.n	80014fc <__libc_init_array+0x24>
 80014e8:	4e0b      	ldr	r6, [pc, #44]	; (8001518 <__libc_init_array+0x40>)
 80014ea:	4c0c      	ldr	r4, [pc, #48]	; (800151c <__libc_init_array+0x44>)
 80014ec:	f000 ff68 	bl	80023c0 <_init>
 80014f0:	1ba4      	subs	r4, r4, r6
 80014f2:	10a4      	asrs	r4, r4, #2
 80014f4:	2500      	movs	r5, #0
 80014f6:	42a5      	cmp	r5, r4
 80014f8:	d105      	bne.n	8001506 <__libc_init_array+0x2e>
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
 80014fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001500:	4798      	blx	r3
 8001502:	3501      	adds	r5, #1
 8001504:	e7ee      	b.n	80014e4 <__libc_init_array+0xc>
 8001506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800150a:	4798      	blx	r3
 800150c:	3501      	adds	r5, #1
 800150e:	e7f2      	b.n	80014f6 <__libc_init_array+0x1e>
 8001510:	080024e8 	.word	0x080024e8
 8001514:	080024e8 	.word	0x080024e8
 8001518:	080024e8 	.word	0x080024e8
 800151c:	080024ec 	.word	0x080024ec

08001520 <memset>:
 8001520:	4402      	add	r2, r0
 8001522:	4603      	mov	r3, r0
 8001524:	4293      	cmp	r3, r2
 8001526:	d100      	bne.n	800152a <memset+0xa>
 8001528:	4770      	bx	lr
 800152a:	f803 1b01 	strb.w	r1, [r3], #1
 800152e:	e7f9      	b.n	8001524 <memset+0x4>

08001530 <iprintf>:
 8001530:	b40f      	push	{r0, r1, r2, r3}
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <iprintf+0x2c>)
 8001534:	b513      	push	{r0, r1, r4, lr}
 8001536:	681c      	ldr	r4, [r3, #0]
 8001538:	b124      	cbz	r4, 8001544 <iprintf+0x14>
 800153a:	69a3      	ldr	r3, [r4, #24]
 800153c:	b913      	cbnz	r3, 8001544 <iprintf+0x14>
 800153e:	4620      	mov	r0, r4
 8001540:	f000 fa22 	bl	8001988 <__sinit>
 8001544:	ab05      	add	r3, sp, #20
 8001546:	9a04      	ldr	r2, [sp, #16]
 8001548:	68a1      	ldr	r1, [r4, #8]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	4620      	mov	r0, r4
 800154e:	f000 fbdb 	bl	8001d08 <_vfiprintf_r>
 8001552:	b002      	add	sp, #8
 8001554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001558:	b004      	add	sp, #16
 800155a:	4770      	bx	lr
 800155c:	20000020 	.word	0x20000020

08001560 <_puts_r>:
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	460e      	mov	r6, r1
 8001564:	4605      	mov	r5, r0
 8001566:	b118      	cbz	r0, 8001570 <_puts_r+0x10>
 8001568:	6983      	ldr	r3, [r0, #24]
 800156a:	b90b      	cbnz	r3, 8001570 <_puts_r+0x10>
 800156c:	f000 fa0c 	bl	8001988 <__sinit>
 8001570:	69ab      	ldr	r3, [r5, #24]
 8001572:	68ac      	ldr	r4, [r5, #8]
 8001574:	b913      	cbnz	r3, 800157c <_puts_r+0x1c>
 8001576:	4628      	mov	r0, r5
 8001578:	f000 fa06 	bl	8001988 <__sinit>
 800157c:	4b23      	ldr	r3, [pc, #140]	; (800160c <_puts_r+0xac>)
 800157e:	429c      	cmp	r4, r3
 8001580:	d117      	bne.n	80015b2 <_puts_r+0x52>
 8001582:	686c      	ldr	r4, [r5, #4]
 8001584:	89a3      	ldrh	r3, [r4, #12]
 8001586:	071b      	lsls	r3, r3, #28
 8001588:	d51d      	bpl.n	80015c6 <_puts_r+0x66>
 800158a:	6923      	ldr	r3, [r4, #16]
 800158c:	b1db      	cbz	r3, 80015c6 <_puts_r+0x66>
 800158e:	3e01      	subs	r6, #1
 8001590:	68a3      	ldr	r3, [r4, #8]
 8001592:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001596:	3b01      	subs	r3, #1
 8001598:	60a3      	str	r3, [r4, #8]
 800159a:	b9e9      	cbnz	r1, 80015d8 <_puts_r+0x78>
 800159c:	2b00      	cmp	r3, #0
 800159e:	da2e      	bge.n	80015fe <_puts_r+0x9e>
 80015a0:	4622      	mov	r2, r4
 80015a2:	210a      	movs	r1, #10
 80015a4:	4628      	mov	r0, r5
 80015a6:	f000 f83f 	bl	8001628 <__swbuf_r>
 80015aa:	3001      	adds	r0, #1
 80015ac:	d011      	beq.n	80015d2 <_puts_r+0x72>
 80015ae:	200a      	movs	r0, #10
 80015b0:	e011      	b.n	80015d6 <_puts_r+0x76>
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <_puts_r+0xb0>)
 80015b4:	429c      	cmp	r4, r3
 80015b6:	d101      	bne.n	80015bc <_puts_r+0x5c>
 80015b8:	68ac      	ldr	r4, [r5, #8]
 80015ba:	e7e3      	b.n	8001584 <_puts_r+0x24>
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_puts_r+0xb4>)
 80015be:	429c      	cmp	r4, r3
 80015c0:	bf08      	it	eq
 80015c2:	68ec      	ldreq	r4, [r5, #12]
 80015c4:	e7de      	b.n	8001584 <_puts_r+0x24>
 80015c6:	4621      	mov	r1, r4
 80015c8:	4628      	mov	r0, r5
 80015ca:	f000 f87f 	bl	80016cc <__swsetup_r>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d0dd      	beq.n	800158e <_puts_r+0x2e>
 80015d2:	f04f 30ff 	mov.w	r0, #4294967295
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da04      	bge.n	80015e6 <_puts_r+0x86>
 80015dc:	69a2      	ldr	r2, [r4, #24]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dc06      	bgt.n	80015f0 <_puts_r+0x90>
 80015e2:	290a      	cmp	r1, #10
 80015e4:	d004      	beq.n	80015f0 <_puts_r+0x90>
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	6022      	str	r2, [r4, #0]
 80015ec:	7019      	strb	r1, [r3, #0]
 80015ee:	e7cf      	b.n	8001590 <_puts_r+0x30>
 80015f0:	4622      	mov	r2, r4
 80015f2:	4628      	mov	r0, r5
 80015f4:	f000 f818 	bl	8001628 <__swbuf_r>
 80015f8:	3001      	adds	r0, #1
 80015fa:	d1c9      	bne.n	8001590 <_puts_r+0x30>
 80015fc:	e7e9      	b.n	80015d2 <_puts_r+0x72>
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	200a      	movs	r0, #10
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	6022      	str	r2, [r4, #0]
 8001606:	7018      	strb	r0, [r3, #0]
 8001608:	e7e5      	b.n	80015d6 <_puts_r+0x76>
 800160a:	bf00      	nop
 800160c:	08002474 	.word	0x08002474
 8001610:	08002494 	.word	0x08002494
 8001614:	08002454 	.word	0x08002454

08001618 <puts>:
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <puts+0xc>)
 800161a:	4601      	mov	r1, r0
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	f7ff bf9f 	b.w	8001560 <_puts_r>
 8001622:	bf00      	nop
 8001624:	20000020 	.word	0x20000020

08001628 <__swbuf_r>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	460e      	mov	r6, r1
 800162c:	4614      	mov	r4, r2
 800162e:	4605      	mov	r5, r0
 8001630:	b118      	cbz	r0, 800163a <__swbuf_r+0x12>
 8001632:	6983      	ldr	r3, [r0, #24]
 8001634:	b90b      	cbnz	r3, 800163a <__swbuf_r+0x12>
 8001636:	f000 f9a7 	bl	8001988 <__sinit>
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <__swbuf_r+0x98>)
 800163c:	429c      	cmp	r4, r3
 800163e:	d12a      	bne.n	8001696 <__swbuf_r+0x6e>
 8001640:	686c      	ldr	r4, [r5, #4]
 8001642:	69a3      	ldr	r3, [r4, #24]
 8001644:	60a3      	str	r3, [r4, #8]
 8001646:	89a3      	ldrh	r3, [r4, #12]
 8001648:	071a      	lsls	r2, r3, #28
 800164a:	d52e      	bpl.n	80016aa <__swbuf_r+0x82>
 800164c:	6923      	ldr	r3, [r4, #16]
 800164e:	b363      	cbz	r3, 80016aa <__swbuf_r+0x82>
 8001650:	6923      	ldr	r3, [r4, #16]
 8001652:	6820      	ldr	r0, [r4, #0]
 8001654:	1ac0      	subs	r0, r0, r3
 8001656:	6963      	ldr	r3, [r4, #20]
 8001658:	b2f6      	uxtb	r6, r6
 800165a:	4283      	cmp	r3, r0
 800165c:	4637      	mov	r7, r6
 800165e:	dc04      	bgt.n	800166a <__swbuf_r+0x42>
 8001660:	4621      	mov	r1, r4
 8001662:	4628      	mov	r0, r5
 8001664:	f000 f926 	bl	80018b4 <_fflush_r>
 8001668:	bb28      	cbnz	r0, 80016b6 <__swbuf_r+0x8e>
 800166a:	68a3      	ldr	r3, [r4, #8]
 800166c:	3b01      	subs	r3, #1
 800166e:	60a3      	str	r3, [r4, #8]
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	6022      	str	r2, [r4, #0]
 8001676:	701e      	strb	r6, [r3, #0]
 8001678:	6963      	ldr	r3, [r4, #20]
 800167a:	3001      	adds	r0, #1
 800167c:	4283      	cmp	r3, r0
 800167e:	d004      	beq.n	800168a <__swbuf_r+0x62>
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	07db      	lsls	r3, r3, #31
 8001684:	d519      	bpl.n	80016ba <__swbuf_r+0x92>
 8001686:	2e0a      	cmp	r6, #10
 8001688:	d117      	bne.n	80016ba <__swbuf_r+0x92>
 800168a:	4621      	mov	r1, r4
 800168c:	4628      	mov	r0, r5
 800168e:	f000 f911 	bl	80018b4 <_fflush_r>
 8001692:	b190      	cbz	r0, 80016ba <__swbuf_r+0x92>
 8001694:	e00f      	b.n	80016b6 <__swbuf_r+0x8e>
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <__swbuf_r+0x9c>)
 8001698:	429c      	cmp	r4, r3
 800169a:	d101      	bne.n	80016a0 <__swbuf_r+0x78>
 800169c:	68ac      	ldr	r4, [r5, #8]
 800169e:	e7d0      	b.n	8001642 <__swbuf_r+0x1a>
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <__swbuf_r+0xa0>)
 80016a2:	429c      	cmp	r4, r3
 80016a4:	bf08      	it	eq
 80016a6:	68ec      	ldreq	r4, [r5, #12]
 80016a8:	e7cb      	b.n	8001642 <__swbuf_r+0x1a>
 80016aa:	4621      	mov	r1, r4
 80016ac:	4628      	mov	r0, r5
 80016ae:	f000 f80d 	bl	80016cc <__swsetup_r>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d0cc      	beq.n	8001650 <__swbuf_r+0x28>
 80016b6:	f04f 37ff 	mov.w	r7, #4294967295
 80016ba:	4638      	mov	r0, r7
 80016bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016be:	bf00      	nop
 80016c0:	08002474 	.word	0x08002474
 80016c4:	08002494 	.word	0x08002494
 80016c8:	08002454 	.word	0x08002454

080016cc <__swsetup_r>:
 80016cc:	4b32      	ldr	r3, [pc, #200]	; (8001798 <__swsetup_r+0xcc>)
 80016ce:	b570      	push	{r4, r5, r6, lr}
 80016d0:	681d      	ldr	r5, [r3, #0]
 80016d2:	4606      	mov	r6, r0
 80016d4:	460c      	mov	r4, r1
 80016d6:	b125      	cbz	r5, 80016e2 <__swsetup_r+0x16>
 80016d8:	69ab      	ldr	r3, [r5, #24]
 80016da:	b913      	cbnz	r3, 80016e2 <__swsetup_r+0x16>
 80016dc:	4628      	mov	r0, r5
 80016de:	f000 f953 	bl	8001988 <__sinit>
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <__swsetup_r+0xd0>)
 80016e4:	429c      	cmp	r4, r3
 80016e6:	d10f      	bne.n	8001708 <__swsetup_r+0x3c>
 80016e8:	686c      	ldr	r4, [r5, #4]
 80016ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	0715      	lsls	r5, r2, #28
 80016f2:	d42c      	bmi.n	800174e <__swsetup_r+0x82>
 80016f4:	06d0      	lsls	r0, r2, #27
 80016f6:	d411      	bmi.n	800171c <__swsetup_r+0x50>
 80016f8:	2209      	movs	r2, #9
 80016fa:	6032      	str	r2, [r6, #0]
 80016fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001700:	81a3      	strh	r3, [r4, #12]
 8001702:	f04f 30ff 	mov.w	r0, #4294967295
 8001706:	e03e      	b.n	8001786 <__swsetup_r+0xba>
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <__swsetup_r+0xd4>)
 800170a:	429c      	cmp	r4, r3
 800170c:	d101      	bne.n	8001712 <__swsetup_r+0x46>
 800170e:	68ac      	ldr	r4, [r5, #8]
 8001710:	e7eb      	b.n	80016ea <__swsetup_r+0x1e>
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <__swsetup_r+0xd8>)
 8001714:	429c      	cmp	r4, r3
 8001716:	bf08      	it	eq
 8001718:	68ec      	ldreq	r4, [r5, #12]
 800171a:	e7e6      	b.n	80016ea <__swsetup_r+0x1e>
 800171c:	0751      	lsls	r1, r2, #29
 800171e:	d512      	bpl.n	8001746 <__swsetup_r+0x7a>
 8001720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001722:	b141      	cbz	r1, 8001736 <__swsetup_r+0x6a>
 8001724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001728:	4299      	cmp	r1, r3
 800172a:	d002      	beq.n	8001732 <__swsetup_r+0x66>
 800172c:	4630      	mov	r0, r6
 800172e:	f000 fa19 	bl	8001b64 <_free_r>
 8001732:	2300      	movs	r3, #0
 8001734:	6363      	str	r3, [r4, #52]	; 0x34
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800173c:	81a3      	strh	r3, [r4, #12]
 800173e:	2300      	movs	r3, #0
 8001740:	6063      	str	r3, [r4, #4]
 8001742:	6923      	ldr	r3, [r4, #16]
 8001744:	6023      	str	r3, [r4, #0]
 8001746:	89a3      	ldrh	r3, [r4, #12]
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	81a3      	strh	r3, [r4, #12]
 800174e:	6923      	ldr	r3, [r4, #16]
 8001750:	b94b      	cbnz	r3, 8001766 <__swsetup_r+0x9a>
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800175c:	d003      	beq.n	8001766 <__swsetup_r+0x9a>
 800175e:	4621      	mov	r1, r4
 8001760:	4630      	mov	r0, r6
 8001762:	f000 f9bf 	bl	8001ae4 <__smakebuf_r>
 8001766:	89a2      	ldrh	r2, [r4, #12]
 8001768:	f012 0301 	ands.w	r3, r2, #1
 800176c:	d00c      	beq.n	8001788 <__swsetup_r+0xbc>
 800176e:	2300      	movs	r3, #0
 8001770:	60a3      	str	r3, [r4, #8]
 8001772:	6963      	ldr	r3, [r4, #20]
 8001774:	425b      	negs	r3, r3
 8001776:	61a3      	str	r3, [r4, #24]
 8001778:	6923      	ldr	r3, [r4, #16]
 800177a:	b953      	cbnz	r3, 8001792 <__swsetup_r+0xc6>
 800177c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001780:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001784:	d1ba      	bne.n	80016fc <__swsetup_r+0x30>
 8001786:	bd70      	pop	{r4, r5, r6, pc}
 8001788:	0792      	lsls	r2, r2, #30
 800178a:	bf58      	it	pl
 800178c:	6963      	ldrpl	r3, [r4, #20]
 800178e:	60a3      	str	r3, [r4, #8]
 8001790:	e7f2      	b.n	8001778 <__swsetup_r+0xac>
 8001792:	2000      	movs	r0, #0
 8001794:	e7f7      	b.n	8001786 <__swsetup_r+0xba>
 8001796:	bf00      	nop
 8001798:	20000020 	.word	0x20000020
 800179c:	08002474 	.word	0x08002474
 80017a0:	08002494 	.word	0x08002494
 80017a4:	08002454 	.word	0x08002454

080017a8 <__sflush_r>:
 80017a8:	898a      	ldrh	r2, [r1, #12]
 80017aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ae:	4605      	mov	r5, r0
 80017b0:	0710      	lsls	r0, r2, #28
 80017b2:	460c      	mov	r4, r1
 80017b4:	d458      	bmi.n	8001868 <__sflush_r+0xc0>
 80017b6:	684b      	ldr	r3, [r1, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	dc05      	bgt.n	80017c8 <__sflush_r+0x20>
 80017bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017be:	2b00      	cmp	r3, #0
 80017c0:	dc02      	bgt.n	80017c8 <__sflush_r+0x20>
 80017c2:	2000      	movs	r0, #0
 80017c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017ca:	2e00      	cmp	r6, #0
 80017cc:	d0f9      	beq.n	80017c2 <__sflush_r+0x1a>
 80017ce:	2300      	movs	r3, #0
 80017d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017d4:	682f      	ldr	r7, [r5, #0]
 80017d6:	6a21      	ldr	r1, [r4, #32]
 80017d8:	602b      	str	r3, [r5, #0]
 80017da:	d032      	beq.n	8001842 <__sflush_r+0x9a>
 80017dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017de:	89a3      	ldrh	r3, [r4, #12]
 80017e0:	075a      	lsls	r2, r3, #29
 80017e2:	d505      	bpl.n	80017f0 <__sflush_r+0x48>
 80017e4:	6863      	ldr	r3, [r4, #4]
 80017e6:	1ac0      	subs	r0, r0, r3
 80017e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017ea:	b10b      	cbz	r3, 80017f0 <__sflush_r+0x48>
 80017ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ee:	1ac0      	subs	r0, r0, r3
 80017f0:	2300      	movs	r3, #0
 80017f2:	4602      	mov	r2, r0
 80017f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017f6:	6a21      	ldr	r1, [r4, #32]
 80017f8:	4628      	mov	r0, r5
 80017fa:	47b0      	blx	r6
 80017fc:	1c43      	adds	r3, r0, #1
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	d106      	bne.n	8001810 <__sflush_r+0x68>
 8001802:	6829      	ldr	r1, [r5, #0]
 8001804:	291d      	cmp	r1, #29
 8001806:	d848      	bhi.n	800189a <__sflush_r+0xf2>
 8001808:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <__sflush_r+0x108>)
 800180a:	40ca      	lsrs	r2, r1
 800180c:	07d6      	lsls	r6, r2, #31
 800180e:	d544      	bpl.n	800189a <__sflush_r+0xf2>
 8001810:	2200      	movs	r2, #0
 8001812:	6062      	str	r2, [r4, #4]
 8001814:	04d9      	lsls	r1, r3, #19
 8001816:	6922      	ldr	r2, [r4, #16]
 8001818:	6022      	str	r2, [r4, #0]
 800181a:	d504      	bpl.n	8001826 <__sflush_r+0x7e>
 800181c:	1c42      	adds	r2, r0, #1
 800181e:	d101      	bne.n	8001824 <__sflush_r+0x7c>
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	b903      	cbnz	r3, 8001826 <__sflush_r+0x7e>
 8001824:	6560      	str	r0, [r4, #84]	; 0x54
 8001826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001828:	602f      	str	r7, [r5, #0]
 800182a:	2900      	cmp	r1, #0
 800182c:	d0c9      	beq.n	80017c2 <__sflush_r+0x1a>
 800182e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001832:	4299      	cmp	r1, r3
 8001834:	d002      	beq.n	800183c <__sflush_r+0x94>
 8001836:	4628      	mov	r0, r5
 8001838:	f000 f994 	bl	8001b64 <_free_r>
 800183c:	2000      	movs	r0, #0
 800183e:	6360      	str	r0, [r4, #52]	; 0x34
 8001840:	e7c0      	b.n	80017c4 <__sflush_r+0x1c>
 8001842:	2301      	movs	r3, #1
 8001844:	4628      	mov	r0, r5
 8001846:	47b0      	blx	r6
 8001848:	1c41      	adds	r1, r0, #1
 800184a:	d1c8      	bne.n	80017de <__sflush_r+0x36>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0c5      	beq.n	80017de <__sflush_r+0x36>
 8001852:	2b1d      	cmp	r3, #29
 8001854:	d001      	beq.n	800185a <__sflush_r+0xb2>
 8001856:	2b16      	cmp	r3, #22
 8001858:	d101      	bne.n	800185e <__sflush_r+0xb6>
 800185a:	602f      	str	r7, [r5, #0]
 800185c:	e7b1      	b.n	80017c2 <__sflush_r+0x1a>
 800185e:	89a3      	ldrh	r3, [r4, #12]
 8001860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001864:	81a3      	strh	r3, [r4, #12]
 8001866:	e7ad      	b.n	80017c4 <__sflush_r+0x1c>
 8001868:	690f      	ldr	r7, [r1, #16]
 800186a:	2f00      	cmp	r7, #0
 800186c:	d0a9      	beq.n	80017c2 <__sflush_r+0x1a>
 800186e:	0793      	lsls	r3, r2, #30
 8001870:	680e      	ldr	r6, [r1, #0]
 8001872:	bf08      	it	eq
 8001874:	694b      	ldreq	r3, [r1, #20]
 8001876:	600f      	str	r7, [r1, #0]
 8001878:	bf18      	it	ne
 800187a:	2300      	movne	r3, #0
 800187c:	eba6 0807 	sub.w	r8, r6, r7
 8001880:	608b      	str	r3, [r1, #8]
 8001882:	f1b8 0f00 	cmp.w	r8, #0
 8001886:	dd9c      	ble.n	80017c2 <__sflush_r+0x1a>
 8001888:	4643      	mov	r3, r8
 800188a:	463a      	mov	r2, r7
 800188c:	6a21      	ldr	r1, [r4, #32]
 800188e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001890:	4628      	mov	r0, r5
 8001892:	47b0      	blx	r6
 8001894:	2800      	cmp	r0, #0
 8001896:	dc06      	bgt.n	80018a6 <__sflush_r+0xfe>
 8001898:	89a3      	ldrh	r3, [r4, #12]
 800189a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800189e:	81a3      	strh	r3, [r4, #12]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	e78e      	b.n	80017c4 <__sflush_r+0x1c>
 80018a6:	4407      	add	r7, r0
 80018a8:	eba8 0800 	sub.w	r8, r8, r0
 80018ac:	e7e9      	b.n	8001882 <__sflush_r+0xda>
 80018ae:	bf00      	nop
 80018b0:	20400001 	.word	0x20400001

080018b4 <_fflush_r>:
 80018b4:	b538      	push	{r3, r4, r5, lr}
 80018b6:	690b      	ldr	r3, [r1, #16]
 80018b8:	4605      	mov	r5, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	b1db      	cbz	r3, 80018f6 <_fflush_r+0x42>
 80018be:	b118      	cbz	r0, 80018c8 <_fflush_r+0x14>
 80018c0:	6983      	ldr	r3, [r0, #24]
 80018c2:	b90b      	cbnz	r3, 80018c8 <_fflush_r+0x14>
 80018c4:	f000 f860 	bl	8001988 <__sinit>
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <_fflush_r+0x48>)
 80018ca:	429c      	cmp	r4, r3
 80018cc:	d109      	bne.n	80018e2 <_fflush_r+0x2e>
 80018ce:	686c      	ldr	r4, [r5, #4]
 80018d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018d4:	b17b      	cbz	r3, 80018f6 <_fflush_r+0x42>
 80018d6:	4621      	mov	r1, r4
 80018d8:	4628      	mov	r0, r5
 80018da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018de:	f7ff bf63 	b.w	80017a8 <__sflush_r>
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <_fflush_r+0x4c>)
 80018e4:	429c      	cmp	r4, r3
 80018e6:	d101      	bne.n	80018ec <_fflush_r+0x38>
 80018e8:	68ac      	ldr	r4, [r5, #8]
 80018ea:	e7f1      	b.n	80018d0 <_fflush_r+0x1c>
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <_fflush_r+0x50>)
 80018ee:	429c      	cmp	r4, r3
 80018f0:	bf08      	it	eq
 80018f2:	68ec      	ldreq	r4, [r5, #12]
 80018f4:	e7ec      	b.n	80018d0 <_fflush_r+0x1c>
 80018f6:	2000      	movs	r0, #0
 80018f8:	bd38      	pop	{r3, r4, r5, pc}
 80018fa:	bf00      	nop
 80018fc:	08002474 	.word	0x08002474
 8001900:	08002494 	.word	0x08002494
 8001904:	08002454 	.word	0x08002454

08001908 <std>:
 8001908:	2300      	movs	r3, #0
 800190a:	b510      	push	{r4, lr}
 800190c:	4604      	mov	r4, r0
 800190e:	e9c0 3300 	strd	r3, r3, [r0]
 8001912:	6083      	str	r3, [r0, #8]
 8001914:	8181      	strh	r1, [r0, #12]
 8001916:	6643      	str	r3, [r0, #100]	; 0x64
 8001918:	81c2      	strh	r2, [r0, #14]
 800191a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800191e:	6183      	str	r3, [r0, #24]
 8001920:	4619      	mov	r1, r3
 8001922:	2208      	movs	r2, #8
 8001924:	305c      	adds	r0, #92	; 0x5c
 8001926:	f7ff fdfb 	bl	8001520 <memset>
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <std+0x38>)
 800192c:	6263      	str	r3, [r4, #36]	; 0x24
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <std+0x3c>)
 8001930:	62a3      	str	r3, [r4, #40]	; 0x28
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <std+0x40>)
 8001934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <std+0x44>)
 8001938:	6224      	str	r4, [r4, #32]
 800193a:	6323      	str	r3, [r4, #48]	; 0x30
 800193c:	bd10      	pop	{r4, pc}
 800193e:	bf00      	nop
 8001940:	08002265 	.word	0x08002265
 8001944:	08002287 	.word	0x08002287
 8001948:	080022bf 	.word	0x080022bf
 800194c:	080022e3 	.word	0x080022e3

08001950 <_cleanup_r>:
 8001950:	4901      	ldr	r1, [pc, #4]	; (8001958 <_cleanup_r+0x8>)
 8001952:	f000 b885 	b.w	8001a60 <_fwalk_reent>
 8001956:	bf00      	nop
 8001958:	080018b5 	.word	0x080018b5

0800195c <__sfmoreglue>:
 800195c:	b570      	push	{r4, r5, r6, lr}
 800195e:	1e4a      	subs	r2, r1, #1
 8001960:	2568      	movs	r5, #104	; 0x68
 8001962:	4355      	muls	r5, r2
 8001964:	460e      	mov	r6, r1
 8001966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800196a:	f000 f949 	bl	8001c00 <_malloc_r>
 800196e:	4604      	mov	r4, r0
 8001970:	b140      	cbz	r0, 8001984 <__sfmoreglue+0x28>
 8001972:	2100      	movs	r1, #0
 8001974:	e9c0 1600 	strd	r1, r6, [r0]
 8001978:	300c      	adds	r0, #12
 800197a:	60a0      	str	r0, [r4, #8]
 800197c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001980:	f7ff fdce 	bl	8001520 <memset>
 8001984:	4620      	mov	r0, r4
 8001986:	bd70      	pop	{r4, r5, r6, pc}

08001988 <__sinit>:
 8001988:	6983      	ldr	r3, [r0, #24]
 800198a:	b510      	push	{r4, lr}
 800198c:	4604      	mov	r4, r0
 800198e:	bb33      	cbnz	r3, 80019de <__sinit+0x56>
 8001990:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001994:	6503      	str	r3, [r0, #80]	; 0x50
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <__sinit+0x58>)
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <__sinit+0x5c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6282      	str	r2, [r0, #40]	; 0x28
 800199e:	4298      	cmp	r0, r3
 80019a0:	bf04      	itt	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	6183      	streq	r3, [r0, #24]
 80019a6:	f000 f81f 	bl	80019e8 <__sfp>
 80019aa:	6060      	str	r0, [r4, #4]
 80019ac:	4620      	mov	r0, r4
 80019ae:	f000 f81b 	bl	80019e8 <__sfp>
 80019b2:	60a0      	str	r0, [r4, #8]
 80019b4:	4620      	mov	r0, r4
 80019b6:	f000 f817 	bl	80019e8 <__sfp>
 80019ba:	2200      	movs	r2, #0
 80019bc:	60e0      	str	r0, [r4, #12]
 80019be:	2104      	movs	r1, #4
 80019c0:	6860      	ldr	r0, [r4, #4]
 80019c2:	f7ff ffa1 	bl	8001908 <std>
 80019c6:	2201      	movs	r2, #1
 80019c8:	2109      	movs	r1, #9
 80019ca:	68a0      	ldr	r0, [r4, #8]
 80019cc:	f7ff ff9c 	bl	8001908 <std>
 80019d0:	2202      	movs	r2, #2
 80019d2:	2112      	movs	r1, #18
 80019d4:	68e0      	ldr	r0, [r4, #12]
 80019d6:	f7ff ff97 	bl	8001908 <std>
 80019da:	2301      	movs	r3, #1
 80019dc:	61a3      	str	r3, [r4, #24]
 80019de:	bd10      	pop	{r4, pc}
 80019e0:	08002450 	.word	0x08002450
 80019e4:	08001951 	.word	0x08001951

080019e8 <__sfp>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <__sfp+0x70>)
 80019ec:	681e      	ldr	r6, [r3, #0]
 80019ee:	69b3      	ldr	r3, [r6, #24]
 80019f0:	4607      	mov	r7, r0
 80019f2:	b913      	cbnz	r3, 80019fa <__sfp+0x12>
 80019f4:	4630      	mov	r0, r6
 80019f6:	f7ff ffc7 	bl	8001988 <__sinit>
 80019fa:	3648      	adds	r6, #72	; 0x48
 80019fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	d503      	bpl.n	8001a0c <__sfp+0x24>
 8001a04:	6833      	ldr	r3, [r6, #0]
 8001a06:	b133      	cbz	r3, 8001a16 <__sfp+0x2e>
 8001a08:	6836      	ldr	r6, [r6, #0]
 8001a0a:	e7f7      	b.n	80019fc <__sfp+0x14>
 8001a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a10:	b16d      	cbz	r5, 8001a2e <__sfp+0x46>
 8001a12:	3468      	adds	r4, #104	; 0x68
 8001a14:	e7f4      	b.n	8001a00 <__sfp+0x18>
 8001a16:	2104      	movs	r1, #4
 8001a18:	4638      	mov	r0, r7
 8001a1a:	f7ff ff9f 	bl	800195c <__sfmoreglue>
 8001a1e:	6030      	str	r0, [r6, #0]
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d1f1      	bne.n	8001a08 <__sfp+0x20>
 8001a24:	230c      	movs	r3, #12
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4604      	mov	r4, r0
 8001a2a:	4620      	mov	r0, r4
 8001a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <__sfp+0x74>)
 8001a30:	6665      	str	r5, [r4, #100]	; 0x64
 8001a32:	e9c4 5500 	strd	r5, r5, [r4]
 8001a36:	60a5      	str	r5, [r4, #8]
 8001a38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001a3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001a40:	2208      	movs	r2, #8
 8001a42:	4629      	mov	r1, r5
 8001a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a48:	f7ff fd6a 	bl	8001520 <memset>
 8001a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a54:	e7e9      	b.n	8001a2a <__sfp+0x42>
 8001a56:	bf00      	nop
 8001a58:	08002450 	.word	0x08002450
 8001a5c:	ffff0001 	.word	0xffff0001

08001a60 <_fwalk_reent>:
 8001a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a64:	4680      	mov	r8, r0
 8001a66:	4689      	mov	r9, r1
 8001a68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a6c:	2600      	movs	r6, #0
 8001a6e:	b914      	cbnz	r4, 8001a76 <_fwalk_reent+0x16>
 8001a70:	4630      	mov	r0, r6
 8001a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001a7a:	3f01      	subs	r7, #1
 8001a7c:	d501      	bpl.n	8001a82 <_fwalk_reent+0x22>
 8001a7e:	6824      	ldr	r4, [r4, #0]
 8001a80:	e7f5      	b.n	8001a6e <_fwalk_reent+0xe>
 8001a82:	89ab      	ldrh	r3, [r5, #12]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d907      	bls.n	8001a98 <_fwalk_reent+0x38>
 8001a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	d003      	beq.n	8001a98 <_fwalk_reent+0x38>
 8001a90:	4629      	mov	r1, r5
 8001a92:	4640      	mov	r0, r8
 8001a94:	47c8      	blx	r9
 8001a96:	4306      	orrs	r6, r0
 8001a98:	3568      	adds	r5, #104	; 0x68
 8001a9a:	e7ee      	b.n	8001a7a <_fwalk_reent+0x1a>

08001a9c <__swhatbuf_r>:
 8001a9c:	b570      	push	{r4, r5, r6, lr}
 8001a9e:	460e      	mov	r6, r1
 8001aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	b096      	sub	sp, #88	; 0x58
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	461d      	mov	r5, r3
 8001aac:	da07      	bge.n	8001abe <__swhatbuf_r+0x22>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	89b3      	ldrh	r3, [r6, #12]
 8001ab4:	061a      	lsls	r2, r3, #24
 8001ab6:	d410      	bmi.n	8001ada <__swhatbuf_r+0x3e>
 8001ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abc:	e00e      	b.n	8001adc <__swhatbuf_r+0x40>
 8001abe:	466a      	mov	r2, sp
 8001ac0:	f000 fc36 	bl	8002330 <_fstat_r>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	dbf2      	blt.n	8001aae <__swhatbuf_r+0x12>
 8001ac8:	9a01      	ldr	r2, [sp, #4]
 8001aca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ace:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ad2:	425a      	negs	r2, r3
 8001ad4:	415a      	adcs	r2, r3
 8001ad6:	602a      	str	r2, [r5, #0]
 8001ad8:	e7ee      	b.n	8001ab8 <__swhatbuf_r+0x1c>
 8001ada:	2340      	movs	r3, #64	; 0x40
 8001adc:	2000      	movs	r0, #0
 8001ade:	6023      	str	r3, [r4, #0]
 8001ae0:	b016      	add	sp, #88	; 0x58
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}

08001ae4 <__smakebuf_r>:
 8001ae4:	898b      	ldrh	r3, [r1, #12]
 8001ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ae8:	079d      	lsls	r5, r3, #30
 8001aea:	4606      	mov	r6, r0
 8001aec:	460c      	mov	r4, r1
 8001aee:	d507      	bpl.n	8001b00 <__smakebuf_r+0x1c>
 8001af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	6123      	str	r3, [r4, #16]
 8001af8:	2301      	movs	r3, #1
 8001afa:	6163      	str	r3, [r4, #20]
 8001afc:	b002      	add	sp, #8
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
 8001b00:	ab01      	add	r3, sp, #4
 8001b02:	466a      	mov	r2, sp
 8001b04:	f7ff ffca 	bl	8001a9c <__swhatbuf_r>
 8001b08:	9900      	ldr	r1, [sp, #0]
 8001b0a:	4605      	mov	r5, r0
 8001b0c:	4630      	mov	r0, r6
 8001b0e:	f000 f877 	bl	8001c00 <_malloc_r>
 8001b12:	b948      	cbnz	r0, 8001b28 <__smakebuf_r+0x44>
 8001b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b18:	059a      	lsls	r2, r3, #22
 8001b1a:	d4ef      	bmi.n	8001afc <__smakebuf_r+0x18>
 8001b1c:	f023 0303 	bic.w	r3, r3, #3
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	81a3      	strh	r3, [r4, #12]
 8001b26:	e7e3      	b.n	8001af0 <__smakebuf_r+0xc>
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <__smakebuf_r+0x7c>)
 8001b2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	6020      	str	r0, [r4, #0]
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	81a3      	strh	r3, [r4, #12]
 8001b36:	9b00      	ldr	r3, [sp, #0]
 8001b38:	6163      	str	r3, [r4, #20]
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	6120      	str	r0, [r4, #16]
 8001b3e:	b15b      	cbz	r3, 8001b58 <__smakebuf_r+0x74>
 8001b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b44:	4630      	mov	r0, r6
 8001b46:	f000 fc05 	bl	8002354 <_isatty_r>
 8001b4a:	b128      	cbz	r0, 8001b58 <__smakebuf_r+0x74>
 8001b4c:	89a3      	ldrh	r3, [r4, #12]
 8001b4e:	f023 0303 	bic.w	r3, r3, #3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	81a3      	strh	r3, [r4, #12]
 8001b58:	89a3      	ldrh	r3, [r4, #12]
 8001b5a:	431d      	orrs	r5, r3
 8001b5c:	81a5      	strh	r5, [r4, #12]
 8001b5e:	e7cd      	b.n	8001afc <__smakebuf_r+0x18>
 8001b60:	08001951 	.word	0x08001951

08001b64 <_free_r>:
 8001b64:	b538      	push	{r3, r4, r5, lr}
 8001b66:	4605      	mov	r5, r0
 8001b68:	2900      	cmp	r1, #0
 8001b6a:	d045      	beq.n	8001bf8 <_free_r+0x94>
 8001b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b70:	1f0c      	subs	r4, r1, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bfb8      	it	lt
 8001b76:	18e4      	addlt	r4, r4, r3
 8001b78:	f000 fc0e 	bl	8002398 <__malloc_lock>
 8001b7c:	4a1f      	ldr	r2, [pc, #124]	; (8001bfc <_free_r+0x98>)
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	4610      	mov	r0, r2
 8001b82:	b933      	cbnz	r3, 8001b92 <_free_r+0x2e>
 8001b84:	6063      	str	r3, [r4, #4]
 8001b86:	6014      	str	r4, [r2, #0]
 8001b88:	4628      	mov	r0, r5
 8001b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b8e:	f000 bc04 	b.w	800239a <__malloc_unlock>
 8001b92:	42a3      	cmp	r3, r4
 8001b94:	d90c      	bls.n	8001bb0 <_free_r+0x4c>
 8001b96:	6821      	ldr	r1, [r4, #0]
 8001b98:	1862      	adds	r2, r4, r1
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	bf04      	itt	eq
 8001b9e:	681a      	ldreq	r2, [r3, #0]
 8001ba0:	685b      	ldreq	r3, [r3, #4]
 8001ba2:	6063      	str	r3, [r4, #4]
 8001ba4:	bf04      	itt	eq
 8001ba6:	1852      	addeq	r2, r2, r1
 8001ba8:	6022      	streq	r2, [r4, #0]
 8001baa:	6004      	str	r4, [r0, #0]
 8001bac:	e7ec      	b.n	8001b88 <_free_r+0x24>
 8001bae:	4613      	mov	r3, r2
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	b10a      	cbz	r2, 8001bb8 <_free_r+0x54>
 8001bb4:	42a2      	cmp	r2, r4
 8001bb6:	d9fa      	bls.n	8001bae <_free_r+0x4a>
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	1858      	adds	r0, r3, r1
 8001bbc:	42a0      	cmp	r0, r4
 8001bbe:	d10b      	bne.n	8001bd8 <_free_r+0x74>
 8001bc0:	6820      	ldr	r0, [r4, #0]
 8001bc2:	4401      	add	r1, r0
 8001bc4:	1858      	adds	r0, r3, r1
 8001bc6:	4282      	cmp	r2, r0
 8001bc8:	6019      	str	r1, [r3, #0]
 8001bca:	d1dd      	bne.n	8001b88 <_free_r+0x24>
 8001bcc:	6810      	ldr	r0, [r2, #0]
 8001bce:	6852      	ldr	r2, [r2, #4]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	4401      	add	r1, r0
 8001bd4:	6019      	str	r1, [r3, #0]
 8001bd6:	e7d7      	b.n	8001b88 <_free_r+0x24>
 8001bd8:	d902      	bls.n	8001be0 <_free_r+0x7c>
 8001bda:	230c      	movs	r3, #12
 8001bdc:	602b      	str	r3, [r5, #0]
 8001bde:	e7d3      	b.n	8001b88 <_free_r+0x24>
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	1821      	adds	r1, r4, r0
 8001be4:	428a      	cmp	r2, r1
 8001be6:	bf04      	itt	eq
 8001be8:	6811      	ldreq	r1, [r2, #0]
 8001bea:	6852      	ldreq	r2, [r2, #4]
 8001bec:	6062      	str	r2, [r4, #4]
 8001bee:	bf04      	itt	eq
 8001bf0:	1809      	addeq	r1, r1, r0
 8001bf2:	6021      	streq	r1, [r4, #0]
 8001bf4:	605c      	str	r4, [r3, #4]
 8001bf6:	e7c7      	b.n	8001b88 <_free_r+0x24>
 8001bf8:	bd38      	pop	{r3, r4, r5, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200000a8 	.word	0x200000a8

08001c00 <_malloc_r>:
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	1ccd      	adds	r5, r1, #3
 8001c04:	f025 0503 	bic.w	r5, r5, #3
 8001c08:	3508      	adds	r5, #8
 8001c0a:	2d0c      	cmp	r5, #12
 8001c0c:	bf38      	it	cc
 8001c0e:	250c      	movcc	r5, #12
 8001c10:	2d00      	cmp	r5, #0
 8001c12:	4606      	mov	r6, r0
 8001c14:	db01      	blt.n	8001c1a <_malloc_r+0x1a>
 8001c16:	42a9      	cmp	r1, r5
 8001c18:	d903      	bls.n	8001c22 <_malloc_r+0x22>
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	6033      	str	r3, [r6, #0]
 8001c1e:	2000      	movs	r0, #0
 8001c20:	bd70      	pop	{r4, r5, r6, pc}
 8001c22:	f000 fbb9 	bl	8002398 <__malloc_lock>
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <_malloc_r+0xac>)
 8001c28:	6814      	ldr	r4, [r2, #0]
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	b991      	cbnz	r1, 8001c54 <_malloc_r+0x54>
 8001c2e:	4c20      	ldr	r4, [pc, #128]	; (8001cb0 <_malloc_r+0xb0>)
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	b91b      	cbnz	r3, 8001c3c <_malloc_r+0x3c>
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 fb05 	bl	8002244 <_sbrk_r>
 8001c3a:	6020      	str	r0, [r4, #0]
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	4630      	mov	r0, r6
 8001c40:	f000 fb00 	bl	8002244 <_sbrk_r>
 8001c44:	1c43      	adds	r3, r0, #1
 8001c46:	d124      	bne.n	8001c92 <_malloc_r+0x92>
 8001c48:	230c      	movs	r3, #12
 8001c4a:	6033      	str	r3, [r6, #0]
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	f000 fba4 	bl	800239a <__malloc_unlock>
 8001c52:	e7e4      	b.n	8001c1e <_malloc_r+0x1e>
 8001c54:	680b      	ldr	r3, [r1, #0]
 8001c56:	1b5b      	subs	r3, r3, r5
 8001c58:	d418      	bmi.n	8001c8c <_malloc_r+0x8c>
 8001c5a:	2b0b      	cmp	r3, #11
 8001c5c:	d90f      	bls.n	8001c7e <_malloc_r+0x7e>
 8001c5e:	600b      	str	r3, [r1, #0]
 8001c60:	50cd      	str	r5, [r1, r3]
 8001c62:	18cc      	adds	r4, r1, r3
 8001c64:	4630      	mov	r0, r6
 8001c66:	f000 fb98 	bl	800239a <__malloc_unlock>
 8001c6a:	f104 000b 	add.w	r0, r4, #11
 8001c6e:	1d23      	adds	r3, r4, #4
 8001c70:	f020 0007 	bic.w	r0, r0, #7
 8001c74:	1ac3      	subs	r3, r0, r3
 8001c76:	d0d3      	beq.n	8001c20 <_malloc_r+0x20>
 8001c78:	425a      	negs	r2, r3
 8001c7a:	50e2      	str	r2, [r4, r3]
 8001c7c:	e7d0      	b.n	8001c20 <_malloc_r+0x20>
 8001c7e:	428c      	cmp	r4, r1
 8001c80:	684b      	ldr	r3, [r1, #4]
 8001c82:	bf16      	itet	ne
 8001c84:	6063      	strne	r3, [r4, #4]
 8001c86:	6013      	streq	r3, [r2, #0]
 8001c88:	460c      	movne	r4, r1
 8001c8a:	e7eb      	b.n	8001c64 <_malloc_r+0x64>
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	6849      	ldr	r1, [r1, #4]
 8001c90:	e7cc      	b.n	8001c2c <_malloc_r+0x2c>
 8001c92:	1cc4      	adds	r4, r0, #3
 8001c94:	f024 0403 	bic.w	r4, r4, #3
 8001c98:	42a0      	cmp	r0, r4
 8001c9a:	d005      	beq.n	8001ca8 <_malloc_r+0xa8>
 8001c9c:	1a21      	subs	r1, r4, r0
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	f000 fad0 	bl	8002244 <_sbrk_r>
 8001ca4:	3001      	adds	r0, #1
 8001ca6:	d0cf      	beq.n	8001c48 <_malloc_r+0x48>
 8001ca8:	6025      	str	r5, [r4, #0]
 8001caa:	e7db      	b.n	8001c64 <_malloc_r+0x64>
 8001cac:	200000a8 	.word	0x200000a8
 8001cb0:	200000ac 	.word	0x200000ac

08001cb4 <__sfputc_r>:
 8001cb4:	6893      	ldr	r3, [r2, #8]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	b410      	push	{r4}
 8001cbc:	6093      	str	r3, [r2, #8]
 8001cbe:	da08      	bge.n	8001cd2 <__sfputc_r+0x1e>
 8001cc0:	6994      	ldr	r4, [r2, #24]
 8001cc2:	42a3      	cmp	r3, r4
 8001cc4:	db01      	blt.n	8001cca <__sfputc_r+0x16>
 8001cc6:	290a      	cmp	r1, #10
 8001cc8:	d103      	bne.n	8001cd2 <__sfputc_r+0x1e>
 8001cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cce:	f7ff bcab 	b.w	8001628 <__swbuf_r>
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	1c58      	adds	r0, r3, #1
 8001cd6:	6010      	str	r0, [r2, #0]
 8001cd8:	7019      	strb	r1, [r3, #0]
 8001cda:	4608      	mov	r0, r1
 8001cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <__sfputs_r>:
 8001ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce4:	4606      	mov	r6, r0
 8001ce6:	460f      	mov	r7, r1
 8001ce8:	4614      	mov	r4, r2
 8001cea:	18d5      	adds	r5, r2, r3
 8001cec:	42ac      	cmp	r4, r5
 8001cee:	d101      	bne.n	8001cf4 <__sfputs_r+0x12>
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	e007      	b.n	8001d04 <__sfputs_r+0x22>
 8001cf4:	463a      	mov	r2, r7
 8001cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cfa:	4630      	mov	r0, r6
 8001cfc:	f7ff ffda 	bl	8001cb4 <__sfputc_r>
 8001d00:	1c43      	adds	r3, r0, #1
 8001d02:	d1f3      	bne.n	8001cec <__sfputs_r+0xa>
 8001d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d08 <_vfiprintf_r>:
 8001d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d0c:	460c      	mov	r4, r1
 8001d0e:	b09d      	sub	sp, #116	; 0x74
 8001d10:	4617      	mov	r7, r2
 8001d12:	461d      	mov	r5, r3
 8001d14:	4606      	mov	r6, r0
 8001d16:	b118      	cbz	r0, 8001d20 <_vfiprintf_r+0x18>
 8001d18:	6983      	ldr	r3, [r0, #24]
 8001d1a:	b90b      	cbnz	r3, 8001d20 <_vfiprintf_r+0x18>
 8001d1c:	f7ff fe34 	bl	8001988 <__sinit>
 8001d20:	4b7c      	ldr	r3, [pc, #496]	; (8001f14 <_vfiprintf_r+0x20c>)
 8001d22:	429c      	cmp	r4, r3
 8001d24:	d158      	bne.n	8001dd8 <_vfiprintf_r+0xd0>
 8001d26:	6874      	ldr	r4, [r6, #4]
 8001d28:	89a3      	ldrh	r3, [r4, #12]
 8001d2a:	0718      	lsls	r0, r3, #28
 8001d2c:	d55e      	bpl.n	8001dec <_vfiprintf_r+0xe4>
 8001d2e:	6923      	ldr	r3, [r4, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d05b      	beq.n	8001dec <_vfiprintf_r+0xe4>
 8001d34:	2300      	movs	r3, #0
 8001d36:	9309      	str	r3, [sp, #36]	; 0x24
 8001d38:	2320      	movs	r3, #32
 8001d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d3e:	2330      	movs	r3, #48	; 0x30
 8001d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d44:	9503      	str	r5, [sp, #12]
 8001d46:	f04f 0b01 	mov.w	fp, #1
 8001d4a:	46b8      	mov	r8, r7
 8001d4c:	4645      	mov	r5, r8
 8001d4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001d52:	b10b      	cbz	r3, 8001d58 <_vfiprintf_r+0x50>
 8001d54:	2b25      	cmp	r3, #37	; 0x25
 8001d56:	d154      	bne.n	8001e02 <_vfiprintf_r+0xfa>
 8001d58:	ebb8 0a07 	subs.w	sl, r8, r7
 8001d5c:	d00b      	beq.n	8001d76 <_vfiprintf_r+0x6e>
 8001d5e:	4653      	mov	r3, sl
 8001d60:	463a      	mov	r2, r7
 8001d62:	4621      	mov	r1, r4
 8001d64:	4630      	mov	r0, r6
 8001d66:	f7ff ffbc 	bl	8001ce2 <__sfputs_r>
 8001d6a:	3001      	adds	r0, #1
 8001d6c:	f000 80c2 	beq.w	8001ef4 <_vfiprintf_r+0x1ec>
 8001d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d72:	4453      	add	r3, sl
 8001d74:	9309      	str	r3, [sp, #36]	; 0x24
 8001d76:	f898 3000 	ldrb.w	r3, [r8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80ba 	beq.w	8001ef4 <_vfiprintf_r+0x1ec>
 8001d80:	2300      	movs	r3, #0
 8001d82:	f04f 32ff 	mov.w	r2, #4294967295
 8001d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d8a:	9304      	str	r3, [sp, #16]
 8001d8c:	9307      	str	r3, [sp, #28]
 8001d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d92:	931a      	str	r3, [sp, #104]	; 0x68
 8001d94:	46a8      	mov	r8, r5
 8001d96:	2205      	movs	r2, #5
 8001d98:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001d9c:	485e      	ldr	r0, [pc, #376]	; (8001f18 <_vfiprintf_r+0x210>)
 8001d9e:	f7fe fa2f 	bl	8000200 <memchr>
 8001da2:	9b04      	ldr	r3, [sp, #16]
 8001da4:	bb78      	cbnz	r0, 8001e06 <_vfiprintf_r+0xfe>
 8001da6:	06d9      	lsls	r1, r3, #27
 8001da8:	bf44      	itt	mi
 8001daa:	2220      	movmi	r2, #32
 8001dac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001db0:	071a      	lsls	r2, r3, #28
 8001db2:	bf44      	itt	mi
 8001db4:	222b      	movmi	r2, #43	; 0x2b
 8001db6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001dba:	782a      	ldrb	r2, [r5, #0]
 8001dbc:	2a2a      	cmp	r2, #42	; 0x2a
 8001dbe:	d02a      	beq.n	8001e16 <_vfiprintf_r+0x10e>
 8001dc0:	9a07      	ldr	r2, [sp, #28]
 8001dc2:	46a8      	mov	r8, r5
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	250a      	movs	r5, #10
 8001dc8:	4641      	mov	r1, r8
 8001dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dce:	3b30      	subs	r3, #48	; 0x30
 8001dd0:	2b09      	cmp	r3, #9
 8001dd2:	d969      	bls.n	8001ea8 <_vfiprintf_r+0x1a0>
 8001dd4:	b360      	cbz	r0, 8001e30 <_vfiprintf_r+0x128>
 8001dd6:	e024      	b.n	8001e22 <_vfiprintf_r+0x11a>
 8001dd8:	4b50      	ldr	r3, [pc, #320]	; (8001f1c <_vfiprintf_r+0x214>)
 8001dda:	429c      	cmp	r4, r3
 8001ddc:	d101      	bne.n	8001de2 <_vfiprintf_r+0xda>
 8001dde:	68b4      	ldr	r4, [r6, #8]
 8001de0:	e7a2      	b.n	8001d28 <_vfiprintf_r+0x20>
 8001de2:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <_vfiprintf_r+0x218>)
 8001de4:	429c      	cmp	r4, r3
 8001de6:	bf08      	it	eq
 8001de8:	68f4      	ldreq	r4, [r6, #12]
 8001dea:	e79d      	b.n	8001d28 <_vfiprintf_r+0x20>
 8001dec:	4621      	mov	r1, r4
 8001dee:	4630      	mov	r0, r6
 8001df0:	f7ff fc6c 	bl	80016cc <__swsetup_r>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d09d      	beq.n	8001d34 <_vfiprintf_r+0x2c>
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	b01d      	add	sp, #116	; 0x74
 8001dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e02:	46a8      	mov	r8, r5
 8001e04:	e7a2      	b.n	8001d4c <_vfiprintf_r+0x44>
 8001e06:	4a44      	ldr	r2, [pc, #272]	; (8001f18 <_vfiprintf_r+0x210>)
 8001e08:	1a80      	subs	r0, r0, r2
 8001e0a:	fa0b f000 	lsl.w	r0, fp, r0
 8001e0e:	4318      	orrs	r0, r3
 8001e10:	9004      	str	r0, [sp, #16]
 8001e12:	4645      	mov	r5, r8
 8001e14:	e7be      	b.n	8001d94 <_vfiprintf_r+0x8c>
 8001e16:	9a03      	ldr	r2, [sp, #12]
 8001e18:	1d11      	adds	r1, r2, #4
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	9103      	str	r1, [sp, #12]
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	db01      	blt.n	8001e26 <_vfiprintf_r+0x11e>
 8001e22:	9207      	str	r2, [sp, #28]
 8001e24:	e004      	b.n	8001e30 <_vfiprintf_r+0x128>
 8001e26:	4252      	negs	r2, r2
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	9207      	str	r2, [sp, #28]
 8001e2e:	9304      	str	r3, [sp, #16]
 8001e30:	f898 3000 	ldrb.w	r3, [r8]
 8001e34:	2b2e      	cmp	r3, #46	; 0x2e
 8001e36:	d10e      	bne.n	8001e56 <_vfiprintf_r+0x14e>
 8001e38:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8001e3e:	d138      	bne.n	8001eb2 <_vfiprintf_r+0x1aa>
 8001e40:	9b03      	ldr	r3, [sp, #12]
 8001e42:	1d1a      	adds	r2, r3, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	9203      	str	r2, [sp, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bfb8      	it	lt
 8001e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e50:	f108 0802 	add.w	r8, r8, #2
 8001e54:	9305      	str	r3, [sp, #20]
 8001e56:	4d33      	ldr	r5, [pc, #204]	; (8001f24 <_vfiprintf_r+0x21c>)
 8001e58:	f898 1000 	ldrb.w	r1, [r8]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f7fe f9ce 	bl	8000200 <memchr>
 8001e64:	b140      	cbz	r0, 8001e78 <_vfiprintf_r+0x170>
 8001e66:	2340      	movs	r3, #64	; 0x40
 8001e68:	1b40      	subs	r0, r0, r5
 8001e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8001e6e:	9b04      	ldr	r3, [sp, #16]
 8001e70:	4303      	orrs	r3, r0
 8001e72:	f108 0801 	add.w	r8, r8, #1
 8001e76:	9304      	str	r3, [sp, #16]
 8001e78:	f898 1000 	ldrb.w	r1, [r8]
 8001e7c:	482a      	ldr	r0, [pc, #168]	; (8001f28 <_vfiprintf_r+0x220>)
 8001e7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e82:	2206      	movs	r2, #6
 8001e84:	f108 0701 	add.w	r7, r8, #1
 8001e88:	f7fe f9ba 	bl	8000200 <memchr>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d037      	beq.n	8001f00 <_vfiprintf_r+0x1f8>
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <_vfiprintf_r+0x224>)
 8001e92:	bb1b      	cbnz	r3, 8001edc <_vfiprintf_r+0x1d4>
 8001e94:	9b03      	ldr	r3, [sp, #12]
 8001e96:	3307      	adds	r3, #7
 8001e98:	f023 0307 	bic.w	r3, r3, #7
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	9303      	str	r3, [sp, #12]
 8001ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ea2:	444b      	add	r3, r9
 8001ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ea6:	e750      	b.n	8001d4a <_vfiprintf_r+0x42>
 8001ea8:	fb05 3202 	mla	r2, r5, r2, r3
 8001eac:	2001      	movs	r0, #1
 8001eae:	4688      	mov	r8, r1
 8001eb0:	e78a      	b.n	8001dc8 <_vfiprintf_r+0xc0>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f108 0801 	add.w	r8, r8, #1
 8001eb8:	9305      	str	r3, [sp, #20]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	250a      	movs	r5, #10
 8001ebe:	4640      	mov	r0, r8
 8001ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ec4:	3a30      	subs	r2, #48	; 0x30
 8001ec6:	2a09      	cmp	r2, #9
 8001ec8:	d903      	bls.n	8001ed2 <_vfiprintf_r+0x1ca>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0c3      	beq.n	8001e56 <_vfiprintf_r+0x14e>
 8001ece:	9105      	str	r1, [sp, #20]
 8001ed0:	e7c1      	b.n	8001e56 <_vfiprintf_r+0x14e>
 8001ed2:	fb05 2101 	mla	r1, r5, r1, r2
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	4680      	mov	r8, r0
 8001eda:	e7f0      	b.n	8001ebe <_vfiprintf_r+0x1b6>
 8001edc:	ab03      	add	r3, sp, #12
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4622      	mov	r2, r4
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <_vfiprintf_r+0x228>)
 8001ee4:	a904      	add	r1, sp, #16
 8001ee6:	4630      	mov	r0, r6
 8001ee8:	f3af 8000 	nop.w
 8001eec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001ef0:	4681      	mov	r9, r0
 8001ef2:	d1d5      	bne.n	8001ea0 <_vfiprintf_r+0x198>
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	065b      	lsls	r3, r3, #25
 8001ef8:	f53f af7e 	bmi.w	8001df8 <_vfiprintf_r+0xf0>
 8001efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001efe:	e77d      	b.n	8001dfc <_vfiprintf_r+0xf4>
 8001f00:	ab03      	add	r3, sp, #12
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	4622      	mov	r2, r4
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <_vfiprintf_r+0x228>)
 8001f08:	a904      	add	r1, sp, #16
 8001f0a:	4630      	mov	r0, r6
 8001f0c:	f000 f888 	bl	8002020 <_printf_i>
 8001f10:	e7ec      	b.n	8001eec <_vfiprintf_r+0x1e4>
 8001f12:	bf00      	nop
 8001f14:	08002474 	.word	0x08002474
 8001f18:	080024b4 	.word	0x080024b4
 8001f1c:	08002494 	.word	0x08002494
 8001f20:	08002454 	.word	0x08002454
 8001f24:	080024ba 	.word	0x080024ba
 8001f28:	080024be 	.word	0x080024be
 8001f2c:	00000000 	.word	0x00000000
 8001f30:	08001ce3 	.word	0x08001ce3

08001f34 <_printf_common>:
 8001f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f38:	4691      	mov	r9, r2
 8001f3a:	461f      	mov	r7, r3
 8001f3c:	688a      	ldr	r2, [r1, #8]
 8001f3e:	690b      	ldr	r3, [r1, #16]
 8001f40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f44:	4293      	cmp	r3, r2
 8001f46:	bfb8      	it	lt
 8001f48:	4613      	movlt	r3, r2
 8001f4a:	f8c9 3000 	str.w	r3, [r9]
 8001f4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f52:	4606      	mov	r6, r0
 8001f54:	460c      	mov	r4, r1
 8001f56:	b112      	cbz	r2, 8001f5e <_printf_common+0x2a>
 8001f58:	3301      	adds	r3, #1
 8001f5a:	f8c9 3000 	str.w	r3, [r9]
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	0699      	lsls	r1, r3, #26
 8001f62:	bf42      	ittt	mi
 8001f64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001f68:	3302      	addmi	r3, #2
 8001f6a:	f8c9 3000 	strmi.w	r3, [r9]
 8001f6e:	6825      	ldr	r5, [r4, #0]
 8001f70:	f015 0506 	ands.w	r5, r5, #6
 8001f74:	d107      	bne.n	8001f86 <_printf_common+0x52>
 8001f76:	f104 0a19 	add.w	sl, r4, #25
 8001f7a:	68e3      	ldr	r3, [r4, #12]
 8001f7c:	f8d9 2000 	ldr.w	r2, [r9]
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	42ab      	cmp	r3, r5
 8001f84:	dc28      	bgt.n	8001fd8 <_printf_common+0xa4>
 8001f86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001f8a:	6822      	ldr	r2, [r4, #0]
 8001f8c:	3300      	adds	r3, #0
 8001f8e:	bf18      	it	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	0692      	lsls	r2, r2, #26
 8001f94:	d42d      	bmi.n	8001ff2 <_printf_common+0xbe>
 8001f96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f9a:	4639      	mov	r1, r7
 8001f9c:	4630      	mov	r0, r6
 8001f9e:	47c0      	blx	r8
 8001fa0:	3001      	adds	r0, #1
 8001fa2:	d020      	beq.n	8001fe6 <_printf_common+0xb2>
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	68e5      	ldr	r5, [r4, #12]
 8001fa8:	f8d9 2000 	ldr.w	r2, [r9]
 8001fac:	f003 0306 	and.w	r3, r3, #6
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	bf08      	it	eq
 8001fb4:	1aad      	subeq	r5, r5, r2
 8001fb6:	68a3      	ldr	r3, [r4, #8]
 8001fb8:	6922      	ldr	r2, [r4, #16]
 8001fba:	bf0c      	ite	eq
 8001fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fc0:	2500      	movne	r5, #0
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	bfc4      	itt	gt
 8001fc6:	1a9b      	subgt	r3, r3, r2
 8001fc8:	18ed      	addgt	r5, r5, r3
 8001fca:	f04f 0900 	mov.w	r9, #0
 8001fce:	341a      	adds	r4, #26
 8001fd0:	454d      	cmp	r5, r9
 8001fd2:	d11a      	bne.n	800200a <_printf_common+0xd6>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	e008      	b.n	8001fea <_printf_common+0xb6>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	4652      	mov	r2, sl
 8001fdc:	4639      	mov	r1, r7
 8001fde:	4630      	mov	r0, r6
 8001fe0:	47c0      	blx	r8
 8001fe2:	3001      	adds	r0, #1
 8001fe4:	d103      	bne.n	8001fee <_printf_common+0xba>
 8001fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fee:	3501      	adds	r5, #1
 8001ff0:	e7c3      	b.n	8001f7a <_printf_common+0x46>
 8001ff2:	18e1      	adds	r1, r4, r3
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	2030      	movs	r0, #48	; 0x30
 8001ff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ffc:	4422      	add	r2, r4
 8001ffe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002002:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002006:	3302      	adds	r3, #2
 8002008:	e7c5      	b.n	8001f96 <_printf_common+0x62>
 800200a:	2301      	movs	r3, #1
 800200c:	4622      	mov	r2, r4
 800200e:	4639      	mov	r1, r7
 8002010:	4630      	mov	r0, r6
 8002012:	47c0      	blx	r8
 8002014:	3001      	adds	r0, #1
 8002016:	d0e6      	beq.n	8001fe6 <_printf_common+0xb2>
 8002018:	f109 0901 	add.w	r9, r9, #1
 800201c:	e7d8      	b.n	8001fd0 <_printf_common+0x9c>
	...

08002020 <_printf_i>:
 8002020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002024:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002028:	460c      	mov	r4, r1
 800202a:	7e09      	ldrb	r1, [r1, #24]
 800202c:	b085      	sub	sp, #20
 800202e:	296e      	cmp	r1, #110	; 0x6e
 8002030:	4617      	mov	r7, r2
 8002032:	4606      	mov	r6, r0
 8002034:	4698      	mov	r8, r3
 8002036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002038:	f000 80b3 	beq.w	80021a2 <_printf_i+0x182>
 800203c:	d822      	bhi.n	8002084 <_printf_i+0x64>
 800203e:	2963      	cmp	r1, #99	; 0x63
 8002040:	d036      	beq.n	80020b0 <_printf_i+0x90>
 8002042:	d80a      	bhi.n	800205a <_printf_i+0x3a>
 8002044:	2900      	cmp	r1, #0
 8002046:	f000 80b9 	beq.w	80021bc <_printf_i+0x19c>
 800204a:	2958      	cmp	r1, #88	; 0x58
 800204c:	f000 8083 	beq.w	8002156 <_printf_i+0x136>
 8002050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002054:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002058:	e032      	b.n	80020c0 <_printf_i+0xa0>
 800205a:	2964      	cmp	r1, #100	; 0x64
 800205c:	d001      	beq.n	8002062 <_printf_i+0x42>
 800205e:	2969      	cmp	r1, #105	; 0x69
 8002060:	d1f6      	bne.n	8002050 <_printf_i+0x30>
 8002062:	6820      	ldr	r0, [r4, #0]
 8002064:	6813      	ldr	r3, [r2, #0]
 8002066:	0605      	lsls	r5, r0, #24
 8002068:	f103 0104 	add.w	r1, r3, #4
 800206c:	d52a      	bpl.n	80020c4 <_printf_i+0xa4>
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6011      	str	r1, [r2, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	da03      	bge.n	800207e <_printf_i+0x5e>
 8002076:	222d      	movs	r2, #45	; 0x2d
 8002078:	425b      	negs	r3, r3
 800207a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800207e:	486f      	ldr	r0, [pc, #444]	; (800223c <_printf_i+0x21c>)
 8002080:	220a      	movs	r2, #10
 8002082:	e039      	b.n	80020f8 <_printf_i+0xd8>
 8002084:	2973      	cmp	r1, #115	; 0x73
 8002086:	f000 809d 	beq.w	80021c4 <_printf_i+0x1a4>
 800208a:	d808      	bhi.n	800209e <_printf_i+0x7e>
 800208c:	296f      	cmp	r1, #111	; 0x6f
 800208e:	d020      	beq.n	80020d2 <_printf_i+0xb2>
 8002090:	2970      	cmp	r1, #112	; 0x70
 8002092:	d1dd      	bne.n	8002050 <_printf_i+0x30>
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	f043 0320 	orr.w	r3, r3, #32
 800209a:	6023      	str	r3, [r4, #0]
 800209c:	e003      	b.n	80020a6 <_printf_i+0x86>
 800209e:	2975      	cmp	r1, #117	; 0x75
 80020a0:	d017      	beq.n	80020d2 <_printf_i+0xb2>
 80020a2:	2978      	cmp	r1, #120	; 0x78
 80020a4:	d1d4      	bne.n	8002050 <_printf_i+0x30>
 80020a6:	2378      	movs	r3, #120	; 0x78
 80020a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020ac:	4864      	ldr	r0, [pc, #400]	; (8002240 <_printf_i+0x220>)
 80020ae:	e055      	b.n	800215c <_printf_i+0x13c>
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	1d19      	adds	r1, r3, #4
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6011      	str	r1, [r2, #0]
 80020b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020c0:	2301      	movs	r3, #1
 80020c2:	e08c      	b.n	80021de <_printf_i+0x1be>
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6011      	str	r1, [r2, #0]
 80020c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020cc:	bf18      	it	ne
 80020ce:	b21b      	sxthne	r3, r3
 80020d0:	e7cf      	b.n	8002072 <_printf_i+0x52>
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	6825      	ldr	r5, [r4, #0]
 80020d6:	1d18      	adds	r0, r3, #4
 80020d8:	6010      	str	r0, [r2, #0]
 80020da:	0628      	lsls	r0, r5, #24
 80020dc:	d501      	bpl.n	80020e2 <_printf_i+0xc2>
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	e002      	b.n	80020e8 <_printf_i+0xc8>
 80020e2:	0668      	lsls	r0, r5, #25
 80020e4:	d5fb      	bpl.n	80020de <_printf_i+0xbe>
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	4854      	ldr	r0, [pc, #336]	; (800223c <_printf_i+0x21c>)
 80020ea:	296f      	cmp	r1, #111	; 0x6f
 80020ec:	bf14      	ite	ne
 80020ee:	220a      	movne	r2, #10
 80020f0:	2208      	moveq	r2, #8
 80020f2:	2100      	movs	r1, #0
 80020f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020f8:	6865      	ldr	r5, [r4, #4]
 80020fa:	60a5      	str	r5, [r4, #8]
 80020fc:	2d00      	cmp	r5, #0
 80020fe:	f2c0 8095 	blt.w	800222c <_printf_i+0x20c>
 8002102:	6821      	ldr	r1, [r4, #0]
 8002104:	f021 0104 	bic.w	r1, r1, #4
 8002108:	6021      	str	r1, [r4, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d13d      	bne.n	800218a <_printf_i+0x16a>
 800210e:	2d00      	cmp	r5, #0
 8002110:	f040 808e 	bne.w	8002230 <_printf_i+0x210>
 8002114:	4665      	mov	r5, ip
 8002116:	2a08      	cmp	r2, #8
 8002118:	d10b      	bne.n	8002132 <_printf_i+0x112>
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	07db      	lsls	r3, r3, #31
 800211e:	d508      	bpl.n	8002132 <_printf_i+0x112>
 8002120:	6923      	ldr	r3, [r4, #16]
 8002122:	6862      	ldr	r2, [r4, #4]
 8002124:	429a      	cmp	r2, r3
 8002126:	bfde      	ittt	le
 8002128:	2330      	movle	r3, #48	; 0x30
 800212a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800212e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002132:	ebac 0305 	sub.w	r3, ip, r5
 8002136:	6123      	str	r3, [r4, #16]
 8002138:	f8cd 8000 	str.w	r8, [sp]
 800213c:	463b      	mov	r3, r7
 800213e:	aa03      	add	r2, sp, #12
 8002140:	4621      	mov	r1, r4
 8002142:	4630      	mov	r0, r6
 8002144:	f7ff fef6 	bl	8001f34 <_printf_common>
 8002148:	3001      	adds	r0, #1
 800214a:	d14d      	bne.n	80021e8 <_printf_i+0x1c8>
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	b005      	add	sp, #20
 8002152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002156:	4839      	ldr	r0, [pc, #228]	; (800223c <_printf_i+0x21c>)
 8002158:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800215c:	6813      	ldr	r3, [r2, #0]
 800215e:	6821      	ldr	r1, [r4, #0]
 8002160:	1d1d      	adds	r5, r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6015      	str	r5, [r2, #0]
 8002166:	060a      	lsls	r2, r1, #24
 8002168:	d50b      	bpl.n	8002182 <_printf_i+0x162>
 800216a:	07ca      	lsls	r2, r1, #31
 800216c:	bf44      	itt	mi
 800216e:	f041 0120 	orrmi.w	r1, r1, #32
 8002172:	6021      	strmi	r1, [r4, #0]
 8002174:	b91b      	cbnz	r3, 800217e <_printf_i+0x15e>
 8002176:	6822      	ldr	r2, [r4, #0]
 8002178:	f022 0220 	bic.w	r2, r2, #32
 800217c:	6022      	str	r2, [r4, #0]
 800217e:	2210      	movs	r2, #16
 8002180:	e7b7      	b.n	80020f2 <_printf_i+0xd2>
 8002182:	064d      	lsls	r5, r1, #25
 8002184:	bf48      	it	mi
 8002186:	b29b      	uxthmi	r3, r3
 8002188:	e7ef      	b.n	800216a <_printf_i+0x14a>
 800218a:	4665      	mov	r5, ip
 800218c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002190:	fb02 3311 	mls	r3, r2, r1, r3
 8002194:	5cc3      	ldrb	r3, [r0, r3]
 8002196:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800219a:	460b      	mov	r3, r1
 800219c:	2900      	cmp	r1, #0
 800219e:	d1f5      	bne.n	800218c <_printf_i+0x16c>
 80021a0:	e7b9      	b.n	8002116 <_printf_i+0xf6>
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	6825      	ldr	r5, [r4, #0]
 80021a6:	6961      	ldr	r1, [r4, #20]
 80021a8:	1d18      	adds	r0, r3, #4
 80021aa:	6010      	str	r0, [r2, #0]
 80021ac:	0628      	lsls	r0, r5, #24
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	d501      	bpl.n	80021b6 <_printf_i+0x196>
 80021b2:	6019      	str	r1, [r3, #0]
 80021b4:	e002      	b.n	80021bc <_printf_i+0x19c>
 80021b6:	066a      	lsls	r2, r5, #25
 80021b8:	d5fb      	bpl.n	80021b2 <_printf_i+0x192>
 80021ba:	8019      	strh	r1, [r3, #0]
 80021bc:	2300      	movs	r3, #0
 80021be:	6123      	str	r3, [r4, #16]
 80021c0:	4665      	mov	r5, ip
 80021c2:	e7b9      	b.n	8002138 <_printf_i+0x118>
 80021c4:	6813      	ldr	r3, [r2, #0]
 80021c6:	1d19      	adds	r1, r3, #4
 80021c8:	6011      	str	r1, [r2, #0]
 80021ca:	681d      	ldr	r5, [r3, #0]
 80021cc:	6862      	ldr	r2, [r4, #4]
 80021ce:	2100      	movs	r1, #0
 80021d0:	4628      	mov	r0, r5
 80021d2:	f7fe f815 	bl	8000200 <memchr>
 80021d6:	b108      	cbz	r0, 80021dc <_printf_i+0x1bc>
 80021d8:	1b40      	subs	r0, r0, r5
 80021da:	6060      	str	r0, [r4, #4]
 80021dc:	6863      	ldr	r3, [r4, #4]
 80021de:	6123      	str	r3, [r4, #16]
 80021e0:	2300      	movs	r3, #0
 80021e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021e6:	e7a7      	b.n	8002138 <_printf_i+0x118>
 80021e8:	6923      	ldr	r3, [r4, #16]
 80021ea:	462a      	mov	r2, r5
 80021ec:	4639      	mov	r1, r7
 80021ee:	4630      	mov	r0, r6
 80021f0:	47c0      	blx	r8
 80021f2:	3001      	adds	r0, #1
 80021f4:	d0aa      	beq.n	800214c <_printf_i+0x12c>
 80021f6:	6823      	ldr	r3, [r4, #0]
 80021f8:	079b      	lsls	r3, r3, #30
 80021fa:	d413      	bmi.n	8002224 <_printf_i+0x204>
 80021fc:	68e0      	ldr	r0, [r4, #12]
 80021fe:	9b03      	ldr	r3, [sp, #12]
 8002200:	4298      	cmp	r0, r3
 8002202:	bfb8      	it	lt
 8002204:	4618      	movlt	r0, r3
 8002206:	e7a3      	b.n	8002150 <_printf_i+0x130>
 8002208:	2301      	movs	r3, #1
 800220a:	464a      	mov	r2, r9
 800220c:	4639      	mov	r1, r7
 800220e:	4630      	mov	r0, r6
 8002210:	47c0      	blx	r8
 8002212:	3001      	adds	r0, #1
 8002214:	d09a      	beq.n	800214c <_printf_i+0x12c>
 8002216:	3501      	adds	r5, #1
 8002218:	68e3      	ldr	r3, [r4, #12]
 800221a:	9a03      	ldr	r2, [sp, #12]
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	42ab      	cmp	r3, r5
 8002220:	dcf2      	bgt.n	8002208 <_printf_i+0x1e8>
 8002222:	e7eb      	b.n	80021fc <_printf_i+0x1dc>
 8002224:	2500      	movs	r5, #0
 8002226:	f104 0919 	add.w	r9, r4, #25
 800222a:	e7f5      	b.n	8002218 <_printf_i+0x1f8>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ac      	bne.n	800218a <_printf_i+0x16a>
 8002230:	7803      	ldrb	r3, [r0, #0]
 8002232:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002236:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800223a:	e76c      	b.n	8002116 <_printf_i+0xf6>
 800223c:	080024c5 	.word	0x080024c5
 8002240:	080024d6 	.word	0x080024d6

08002244 <_sbrk_r>:
 8002244:	b538      	push	{r3, r4, r5, lr}
 8002246:	4c06      	ldr	r4, [pc, #24]	; (8002260 <_sbrk_r+0x1c>)
 8002248:	2300      	movs	r3, #0
 800224a:	4605      	mov	r5, r0
 800224c:	4608      	mov	r0, r1
 800224e:	6023      	str	r3, [r4, #0]
 8002250:	f7fe f89a 	bl	8000388 <_sbrk>
 8002254:	1c43      	adds	r3, r0, #1
 8002256:	d102      	bne.n	800225e <_sbrk_r+0x1a>
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	b103      	cbz	r3, 800225e <_sbrk_r+0x1a>
 800225c:	602b      	str	r3, [r5, #0]
 800225e:	bd38      	pop	{r3, r4, r5, pc}
 8002260:	200004d4 	.word	0x200004d4

08002264 <__sread>:
 8002264:	b510      	push	{r4, lr}
 8002266:	460c      	mov	r4, r1
 8002268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800226c:	f000 f896 	bl	800239c <_read_r>
 8002270:	2800      	cmp	r0, #0
 8002272:	bfab      	itete	ge
 8002274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002276:	89a3      	ldrhlt	r3, [r4, #12]
 8002278:	181b      	addge	r3, r3, r0
 800227a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800227e:	bfac      	ite	ge
 8002280:	6563      	strge	r3, [r4, #84]	; 0x54
 8002282:	81a3      	strhlt	r3, [r4, #12]
 8002284:	bd10      	pop	{r4, pc}

08002286 <__swrite>:
 8002286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800228a:	461f      	mov	r7, r3
 800228c:	898b      	ldrh	r3, [r1, #12]
 800228e:	05db      	lsls	r3, r3, #23
 8002290:	4605      	mov	r5, r0
 8002292:	460c      	mov	r4, r1
 8002294:	4616      	mov	r6, r2
 8002296:	d505      	bpl.n	80022a4 <__swrite+0x1e>
 8002298:	2302      	movs	r3, #2
 800229a:	2200      	movs	r2, #0
 800229c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a0:	f000 f868 	bl	8002374 <_lseek_r>
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022ae:	81a3      	strh	r3, [r4, #12]
 80022b0:	4632      	mov	r2, r6
 80022b2:	463b      	mov	r3, r7
 80022b4:	4628      	mov	r0, r5
 80022b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022ba:	f000 b817 	b.w	80022ec <_write_r>

080022be <__sseek>:
 80022be:	b510      	push	{r4, lr}
 80022c0:	460c      	mov	r4, r1
 80022c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c6:	f000 f855 	bl	8002374 <_lseek_r>
 80022ca:	1c43      	adds	r3, r0, #1
 80022cc:	89a3      	ldrh	r3, [r4, #12]
 80022ce:	bf15      	itete	ne
 80022d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80022d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022da:	81a3      	strheq	r3, [r4, #12]
 80022dc:	bf18      	it	ne
 80022de:	81a3      	strhne	r3, [r4, #12]
 80022e0:	bd10      	pop	{r4, pc}

080022e2 <__sclose>:
 80022e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e6:	f000 b813 	b.w	8002310 <_close_r>
	...

080022ec <_write_r>:
 80022ec:	b538      	push	{r3, r4, r5, lr}
 80022ee:	4c07      	ldr	r4, [pc, #28]	; (800230c <_write_r+0x20>)
 80022f0:	4605      	mov	r5, r0
 80022f2:	4608      	mov	r0, r1
 80022f4:	4611      	mov	r1, r2
 80022f6:	2200      	movs	r2, #0
 80022f8:	6022      	str	r2, [r4, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	f7fd fff4 	bl	80002e8 <_write>
 8002300:	1c43      	adds	r3, r0, #1
 8002302:	d102      	bne.n	800230a <_write_r+0x1e>
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	b103      	cbz	r3, 800230a <_write_r+0x1e>
 8002308:	602b      	str	r3, [r5, #0]
 800230a:	bd38      	pop	{r3, r4, r5, pc}
 800230c:	200004d4 	.word	0x200004d4

08002310 <_close_r>:
 8002310:	b538      	push	{r3, r4, r5, lr}
 8002312:	4c06      	ldr	r4, [pc, #24]	; (800232c <_close_r+0x1c>)
 8002314:	2300      	movs	r3, #0
 8002316:	4605      	mov	r5, r0
 8002318:	4608      	mov	r0, r1
 800231a:	6023      	str	r3, [r4, #0]
 800231c:	f7fe f800 	bl	8000320 <_close>
 8002320:	1c43      	adds	r3, r0, #1
 8002322:	d102      	bne.n	800232a <_close_r+0x1a>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	b103      	cbz	r3, 800232a <_close_r+0x1a>
 8002328:	602b      	str	r3, [r5, #0]
 800232a:	bd38      	pop	{r3, r4, r5, pc}
 800232c:	200004d4 	.word	0x200004d4

08002330 <_fstat_r>:
 8002330:	b538      	push	{r3, r4, r5, lr}
 8002332:	4c07      	ldr	r4, [pc, #28]	; (8002350 <_fstat_r+0x20>)
 8002334:	2300      	movs	r3, #0
 8002336:	4605      	mov	r5, r0
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	6023      	str	r3, [r4, #0]
 800233e:	f7fd fffb 	bl	8000338 <_fstat>
 8002342:	1c43      	adds	r3, r0, #1
 8002344:	d102      	bne.n	800234c <_fstat_r+0x1c>
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	b103      	cbz	r3, 800234c <_fstat_r+0x1c>
 800234a:	602b      	str	r3, [r5, #0]
 800234c:	bd38      	pop	{r3, r4, r5, pc}
 800234e:	bf00      	nop
 8002350:	200004d4 	.word	0x200004d4

08002354 <_isatty_r>:
 8002354:	b538      	push	{r3, r4, r5, lr}
 8002356:	4c06      	ldr	r4, [pc, #24]	; (8002370 <_isatty_r+0x1c>)
 8002358:	2300      	movs	r3, #0
 800235a:	4605      	mov	r5, r0
 800235c:	4608      	mov	r0, r1
 800235e:	6023      	str	r3, [r4, #0]
 8002360:	f7fd fffa 	bl	8000358 <_isatty>
 8002364:	1c43      	adds	r3, r0, #1
 8002366:	d102      	bne.n	800236e <_isatty_r+0x1a>
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	b103      	cbz	r3, 800236e <_isatty_r+0x1a>
 800236c:	602b      	str	r3, [r5, #0]
 800236e:	bd38      	pop	{r3, r4, r5, pc}
 8002370:	200004d4 	.word	0x200004d4

08002374 <_lseek_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4c07      	ldr	r4, [pc, #28]	; (8002394 <_lseek_r+0x20>)
 8002378:	4605      	mov	r5, r0
 800237a:	4608      	mov	r0, r1
 800237c:	4611      	mov	r1, r2
 800237e:	2200      	movs	r2, #0
 8002380:	6022      	str	r2, [r4, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	f7fd fff3 	bl	800036e <_lseek>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <_lseek_r+0x1e>
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	b103      	cbz	r3, 8002392 <_lseek_r+0x1e>
 8002390:	602b      	str	r3, [r5, #0]
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	200004d4 	.word	0x200004d4

08002398 <__malloc_lock>:
 8002398:	4770      	bx	lr

0800239a <__malloc_unlock>:
 800239a:	4770      	bx	lr

0800239c <_read_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4c07      	ldr	r4, [pc, #28]	; (80023bc <_read_r+0x20>)
 80023a0:	4605      	mov	r5, r0
 80023a2:	4608      	mov	r0, r1
 80023a4:	4611      	mov	r1, r2
 80023a6:	2200      	movs	r2, #0
 80023a8:	6022      	str	r2, [r4, #0]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7fd ff7f 	bl	80002ae <_read>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d102      	bne.n	80023ba <_read_r+0x1e>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	b103      	cbz	r3, 80023ba <_read_r+0x1e>
 80023b8:	602b      	str	r3, [r5, #0]
 80023ba:	bd38      	pop	{r3, r4, r5, pc}
 80023bc:	200004d4 	.word	0x200004d4

080023c0 <_init>:
 80023c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c2:	bf00      	nop
 80023c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c6:	bc08      	pop	{r3}
 80023c8:	469e      	mov	lr, r3
 80023ca:	4770      	bx	lr

080023cc <_fini>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	bf00      	nop
 80023d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d2:	bc08      	pop	{r3}
 80023d4:	469e      	mov	lr, r3
 80023d6:	4770      	bx	lr
